// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameContent.proto

#ifndef PROTOBUF_gameContent_2eproto__INCLUDED
#define PROTOBUF_gameContent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_gameContent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[19];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGlobalNoticeImpl();
void InitDefaultsGlobalNotice();
void InitDefaultsUserConnectionImpl();
void InitDefaultsUserConnection();
void InitDefaultsEventMoveImpl();
void InitDefaultsEventMove();
void InitDefaultsEventStopImpl();
void InitDefaultsEventStop();
void InitDefaultsEventJumpImpl();
void InitDefaultsEventJump();
void InitDefaultsEventShootImpl();
void InitDefaultsEventShoot();
void InitDefaultsEventHitImpl();
void InitDefaultsEventHit();
void InitDefaultsEventChangeWeaponImpl();
void InitDefaultsEventChangeWeapon();
void InitDefaultsEventSpawnImpl();
void InitDefaultsEventSpawn();
void InitDefaultsEventUserSyncImpl();
void InitDefaultsEventUserSync();
void InitDefaultsEventDeathImpl();
void InitDefaultsEventDeath();
void InitDefaultsEventItemSpawnImpl();
void InitDefaultsEventItemSpawn();
void InitDefaultsEventItemGetImpl();
void InitDefaultsEventItemGet();
void InitDefaultsEventCamImpl();
void InitDefaultsEventCam();
void InitDefaultsInfoItemImpl();
void InitDefaultsInfoItem();
void InitDefaultsGameEventImpl();
void InitDefaultsGameEvent();
void InitDefaultsSystemEventImpl();
void InitDefaultsSystemEvent();
void InitDefaultsUserEventImpl();
void InitDefaultsUserEvent();
void InitDefaultsPacketBodyImpl();
void InitDefaultsPacketBody();
inline void InitDefaults() {
  InitDefaultsGlobalNotice();
  InitDefaultsUserConnection();
  InitDefaultsEventMove();
  InitDefaultsEventStop();
  InitDefaultsEventJump();
  InitDefaultsEventShoot();
  InitDefaultsEventHit();
  InitDefaultsEventChangeWeapon();
  InitDefaultsEventSpawn();
  InitDefaultsEventUserSync();
  InitDefaultsEventDeath();
  InitDefaultsEventItemSpawn();
  InitDefaultsEventItemGet();
  InitDefaultsEventCam();
  InitDefaultsInfoItem();
  InitDefaultsGameEvent();
  InitDefaultsSystemEvent();
  InitDefaultsUserEvent();
  InitDefaultsPacketBody();
}
}  // namespace protobuf_gameContent_2eproto
namespace server2N {
class EventCam;
class EventCamDefaultTypeInternal;
extern EventCamDefaultTypeInternal _EventCam_default_instance_;
class EventChangeWeapon;
class EventChangeWeaponDefaultTypeInternal;
extern EventChangeWeaponDefaultTypeInternal _EventChangeWeapon_default_instance_;
class EventDeath;
class EventDeathDefaultTypeInternal;
extern EventDeathDefaultTypeInternal _EventDeath_default_instance_;
class EventHit;
class EventHitDefaultTypeInternal;
extern EventHitDefaultTypeInternal _EventHit_default_instance_;
class EventItemGet;
class EventItemGetDefaultTypeInternal;
extern EventItemGetDefaultTypeInternal _EventItemGet_default_instance_;
class EventItemSpawn;
class EventItemSpawnDefaultTypeInternal;
extern EventItemSpawnDefaultTypeInternal _EventItemSpawn_default_instance_;
class EventJump;
class EventJumpDefaultTypeInternal;
extern EventJumpDefaultTypeInternal _EventJump_default_instance_;
class EventMove;
class EventMoveDefaultTypeInternal;
extern EventMoveDefaultTypeInternal _EventMove_default_instance_;
class EventShoot;
class EventShootDefaultTypeInternal;
extern EventShootDefaultTypeInternal _EventShoot_default_instance_;
class EventSpawn;
class EventSpawnDefaultTypeInternal;
extern EventSpawnDefaultTypeInternal _EventSpawn_default_instance_;
class EventStop;
class EventStopDefaultTypeInternal;
extern EventStopDefaultTypeInternal _EventStop_default_instance_;
class EventUserSync;
class EventUserSyncDefaultTypeInternal;
extern EventUserSyncDefaultTypeInternal _EventUserSync_default_instance_;
class GameEvent;
class GameEventDefaultTypeInternal;
extern GameEventDefaultTypeInternal _GameEvent_default_instance_;
class GlobalNotice;
class GlobalNoticeDefaultTypeInternal;
extern GlobalNoticeDefaultTypeInternal _GlobalNotice_default_instance_;
class InfoItem;
class InfoItemDefaultTypeInternal;
extern InfoItemDefaultTypeInternal _InfoItem_default_instance_;
class PacketBody;
class PacketBodyDefaultTypeInternal;
extern PacketBodyDefaultTypeInternal _PacketBody_default_instance_;
class SystemEvent;
class SystemEventDefaultTypeInternal;
extern SystemEventDefaultTypeInternal _SystemEvent_default_instance_;
class UserConnection;
class UserConnectionDefaultTypeInternal;
extern UserConnectionDefaultTypeInternal _UserConnection_default_instance_;
class UserEvent;
class UserEventDefaultTypeInternal;
extern UserEventDefaultTypeInternal _UserEvent_default_instance_;
}  // namespace server2N
namespace google {
namespace protobuf {
template<> ::server2N::EventCam* Arena::Create< ::server2N::EventCam>(Arena*);
template<> ::server2N::EventChangeWeapon* Arena::Create< ::server2N::EventChangeWeapon>(Arena*);
template<> ::server2N::EventDeath* Arena::Create< ::server2N::EventDeath>(Arena*);
template<> ::server2N::EventHit* Arena::Create< ::server2N::EventHit>(Arena*);
template<> ::server2N::EventItemGet* Arena::Create< ::server2N::EventItemGet>(Arena*);
template<> ::server2N::EventItemSpawn* Arena::Create< ::server2N::EventItemSpawn>(Arena*);
template<> ::server2N::EventJump* Arena::Create< ::server2N::EventJump>(Arena*);
template<> ::server2N::EventMove* Arena::Create< ::server2N::EventMove>(Arena*);
template<> ::server2N::EventShoot* Arena::Create< ::server2N::EventShoot>(Arena*);
template<> ::server2N::EventSpawn* Arena::Create< ::server2N::EventSpawn>(Arena*);
template<> ::server2N::EventStop* Arena::Create< ::server2N::EventStop>(Arena*);
template<> ::server2N::EventUserSync* Arena::Create< ::server2N::EventUserSync>(Arena*);
template<> ::server2N::GameEvent* Arena::Create< ::server2N::GameEvent>(Arena*);
template<> ::server2N::GlobalNotice* Arena::Create< ::server2N::GlobalNotice>(Arena*);
template<> ::server2N::InfoItem* Arena::Create< ::server2N::InfoItem>(Arena*);
template<> ::server2N::PacketBody* Arena::Create< ::server2N::PacketBody>(Arena*);
template<> ::server2N::SystemEvent* Arena::Create< ::server2N::SystemEvent>(Arena*);
template<> ::server2N::UserConnection* Arena::Create< ::server2N::UserConnection>(Arena*);
template<> ::server2N::UserEvent* Arena::Create< ::server2N::UserEvent>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace server2N {

enum GlobalNotice_NoticeInfo {
  GlobalNotice_NoticeInfo_Nothing = 0,
  GlobalNotice_NoticeInfo_KillInfo = 1,
  GlobalNotice_NoticeInfo_Notice = 2,
  GlobalNotice_NoticeInfo_ItemInfo = 3,
  GlobalNotice_NoticeInfo_GlobalNotice_NoticeInfo_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GlobalNotice_NoticeInfo_GlobalNotice_NoticeInfo_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GlobalNotice_NoticeInfo_IsValid(int value);
const GlobalNotice_NoticeInfo GlobalNotice_NoticeInfo_NoticeInfo_MIN = GlobalNotice_NoticeInfo_Nothing;
const GlobalNotice_NoticeInfo GlobalNotice_NoticeInfo_NoticeInfo_MAX = GlobalNotice_NoticeInfo_ItemInfo;
const int GlobalNotice_NoticeInfo_NoticeInfo_ARRAYSIZE = GlobalNotice_NoticeInfo_NoticeInfo_MAX + 1;

const ::google::protobuf::EnumDescriptor* GlobalNotice_NoticeInfo_descriptor();
inline const ::std::string& GlobalNotice_NoticeInfo_Name(GlobalNotice_NoticeInfo value) {
  return ::google::protobuf::internal::NameOfEnum(
    GlobalNotice_NoticeInfo_descriptor(), value);
}
inline bool GlobalNotice_NoticeInfo_Parse(
    const ::std::string& name, GlobalNotice_NoticeInfo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GlobalNotice_NoticeInfo>(
    GlobalNotice_NoticeInfo_descriptor(), name, value);
}
enum UserConnection_ConnectionType {
  UserConnection_ConnectionType_Nothing = 0,
  UserConnection_ConnectionType_Connect = 1,
  UserConnection_ConnectionType_TryConnect = 2,
  UserConnection_ConnectionType_AcceptConnect = 3,
  UserConnection_ConnectionType_DisConnect = 4,
  UserConnection_ConnectionType_UserConnection_ConnectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UserConnection_ConnectionType_UserConnection_ConnectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UserConnection_ConnectionType_IsValid(int value);
const UserConnection_ConnectionType UserConnection_ConnectionType_ConnectionType_MIN = UserConnection_ConnectionType_Nothing;
const UserConnection_ConnectionType UserConnection_ConnectionType_ConnectionType_MAX = UserConnection_ConnectionType_DisConnect;
const int UserConnection_ConnectionType_ConnectionType_ARRAYSIZE = UserConnection_ConnectionType_ConnectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserConnection_ConnectionType_descriptor();
inline const ::std::string& UserConnection_ConnectionType_Name(UserConnection_ConnectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserConnection_ConnectionType_descriptor(), value);
}
inline bool UserConnection_ConnectionType_Parse(
    const ::std::string& name, UserConnection_ConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserConnection_ConnectionType>(
    UserConnection_ConnectionType_descriptor(), name, value);
}
enum EventMove_Direction {
  EventMove_Direction_Nothing = 0,
  EventMove_Direction_Left = 1,
  EventMove_Direction_Right = 2,
  EventMove_Direction_Down = 3,
  EventMove_Direction_Up = 4,
  EventMove_Direction_EventMove_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventMove_Direction_EventMove_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventMove_Direction_IsValid(int value);
const EventMove_Direction EventMove_Direction_Direction_MIN = EventMove_Direction_Nothing;
const EventMove_Direction EventMove_Direction_Direction_MAX = EventMove_Direction_Up;
const int EventMove_Direction_Direction_ARRAYSIZE = EventMove_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventMove_Direction_descriptor();
inline const ::std::string& EventMove_Direction_Name(EventMove_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventMove_Direction_descriptor(), value);
}
inline bool EventMove_Direction_Parse(
    const ::std::string& name, EventMove_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventMove_Direction>(
    EventMove_Direction_descriptor(), name, value);
}
enum InfoItem_ItemType {
  InfoItem_ItemType_Recover = 0,
  InfoItem_ItemType_Weapone = 1,
  InfoItem_ItemType_InfoItem_ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  InfoItem_ItemType_InfoItem_ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool InfoItem_ItemType_IsValid(int value);
const InfoItem_ItemType InfoItem_ItemType_ItemType_MIN = InfoItem_ItemType_Recover;
const InfoItem_ItemType InfoItem_ItemType_ItemType_MAX = InfoItem_ItemType_Weapone;
const int InfoItem_ItemType_ItemType_ARRAYSIZE = InfoItem_ItemType_ItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InfoItem_ItemType_descriptor();
inline const ::std::string& InfoItem_ItemType_Name(InfoItem_ItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InfoItem_ItemType_descriptor(), value);
}
inline bool InfoItem_ItemType_Parse(
    const ::std::string& name, InfoItem_ItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InfoItem_ItemType>(
    InfoItem_ItemType_descriptor(), name, value);
}
enum InfoItem_WeaponId {
  InfoItem_WeaponId_Nothing = 0,
  InfoItem_WeaponId_Pistol = 1,
  InfoItem_WeaponId_Sniper = 2,
  InfoItem_WeaponId_InfoItem_WeaponId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  InfoItem_WeaponId_InfoItem_WeaponId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool InfoItem_WeaponId_IsValid(int value);
const InfoItem_WeaponId InfoItem_WeaponId_WeaponId_MIN = InfoItem_WeaponId_Nothing;
const InfoItem_WeaponId InfoItem_WeaponId_WeaponId_MAX = InfoItem_WeaponId_Sniper;
const int InfoItem_WeaponId_WeaponId_ARRAYSIZE = InfoItem_WeaponId_WeaponId_MAX + 1;

const ::google::protobuf::EnumDescriptor* InfoItem_WeaponId_descriptor();
inline const ::std::string& InfoItem_WeaponId_Name(InfoItem_WeaponId value) {
  return ::google::protobuf::internal::NameOfEnum(
    InfoItem_WeaponId_descriptor(), value);
}
inline bool InfoItem_WeaponId_Parse(
    const ::std::string& name, InfoItem_WeaponId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InfoItem_WeaponId>(
    InfoItem_WeaponId_descriptor(), name, value);
}
enum GameEvent_eventType {
  GameEvent_eventType_Nothing = 0,
  GameEvent_eventType_UserEvent = 1,
  GameEvent_eventType_SystemEvent = 2,
  GameEvent_eventType_GameEvent_eventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameEvent_eventType_GameEvent_eventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameEvent_eventType_IsValid(int value);
const GameEvent_eventType GameEvent_eventType_eventType_MIN = GameEvent_eventType_Nothing;
const GameEvent_eventType GameEvent_eventType_eventType_MAX = GameEvent_eventType_SystemEvent;
const int GameEvent_eventType_eventType_ARRAYSIZE = GameEvent_eventType_eventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameEvent_eventType_descriptor();
inline const ::std::string& GameEvent_eventType_Name(GameEvent_eventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameEvent_eventType_descriptor(), value);
}
inline bool GameEvent_eventType_Parse(
    const ::std::string& name, GameEvent_eventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameEvent_eventType>(
    GameEvent_eventType_descriptor(), name, value);
}
enum SystemEvent_action {
  SystemEvent_action_Nothing = 0,
  SystemEvent_action_EventItemSpawn = 200,
  SystemEvent_action_EventItemGet = 201,
  SystemEvent_action_SystemEvent_action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemEvent_action_SystemEvent_action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemEvent_action_IsValid(int value);
const SystemEvent_action SystemEvent_action_action_MIN = SystemEvent_action_Nothing;
const SystemEvent_action SystemEvent_action_action_MAX = SystemEvent_action_EventItemGet;
const int SystemEvent_action_action_ARRAYSIZE = SystemEvent_action_action_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemEvent_action_descriptor();
inline const ::std::string& SystemEvent_action_Name(SystemEvent_action value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemEvent_action_descriptor(), value);
}
inline bool SystemEvent_action_Parse(
    const ::std::string& name, SystemEvent_action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemEvent_action>(
    SystemEvent_action_descriptor(), name, value);
}
enum UserEvent_action {
  UserEvent_action_Nothing = 0,
  UserEvent_action_EventMove = 100,
  UserEvent_action_EventStop = 101,
  UserEvent_action_EventJump = 102,
  UserEvent_action_EventShoot = 103,
  UserEvent_action_EventHit = 104,
  UserEvent_action_EventSpawn = 105,
  UserEvent_action_EventUserSync = 106,
  UserEvent_action_EventDeath = 107,
  UserEvent_action_EventBullet = 108,
  UserEvent_action_EventChangeWeapon = 109,
  UserEvent_action_EventCam = 122,
  UserEvent_action_UserEvent_action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UserEvent_action_UserEvent_action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UserEvent_action_IsValid(int value);
const UserEvent_action UserEvent_action_action_MIN = UserEvent_action_Nothing;
const UserEvent_action UserEvent_action_action_MAX = UserEvent_action_EventCam;
const int UserEvent_action_action_ARRAYSIZE = UserEvent_action_action_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserEvent_action_descriptor();
inline const ::std::string& UserEvent_action_Name(UserEvent_action value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserEvent_action_descriptor(), value);
}
inline bool UserEvent_action_Parse(
    const ::std::string& name, UserEvent_action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserEvent_action>(
    UserEvent_action_descriptor(), name, value);
}
enum PacketBody_messageType {
  PacketBody_messageType_GameEvent = 0,
  PacketBody_messageType_UserConnection = 10000,
  PacketBody_messageType_GlobalNotice = 10001,
  PacketBody_messageType_PacketBody_messageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PacketBody_messageType_PacketBody_messageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PacketBody_messageType_IsValid(int value);
const PacketBody_messageType PacketBody_messageType_messageType_MIN = PacketBody_messageType_GameEvent;
const PacketBody_messageType PacketBody_messageType_messageType_MAX = PacketBody_messageType_GlobalNotice;
const int PacketBody_messageType_messageType_ARRAYSIZE = PacketBody_messageType_messageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketBody_messageType_descriptor();
inline const ::std::string& PacketBody_messageType_Name(PacketBody_messageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketBody_messageType_descriptor(), value);
}
inline bool PacketBody_messageType_Parse(
    const ::std::string& name, PacketBody_messageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketBody_messageType>(
    PacketBody_messageType_descriptor(), name, value);
}
// ===================================================================

class GlobalNotice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.GlobalNotice) */ {
 public:
  GlobalNotice();
  virtual ~GlobalNotice();

  GlobalNotice(const GlobalNotice& from);

  inline GlobalNotice& operator=(const GlobalNotice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalNotice(GlobalNotice&& from) noexcept
    : GlobalNotice() {
    *this = ::std::move(from);
  }

  inline GlobalNotice& operator=(GlobalNotice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalNotice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalNotice* internal_default_instance() {
    return reinterpret_cast<const GlobalNotice*>(
               &_GlobalNotice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GlobalNotice* other);
  friend void swap(GlobalNotice& a, GlobalNotice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalNotice* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GlobalNotice>(NULL);
  }

  GlobalNotice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GlobalNotice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlobalNotice& from);
  void MergeFrom(const GlobalNotice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlobalNotice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GlobalNotice_NoticeInfo NoticeInfo;
  static const NoticeInfo Nothing =
    GlobalNotice_NoticeInfo_Nothing;
  static const NoticeInfo KillInfo =
    GlobalNotice_NoticeInfo_KillInfo;
  static const NoticeInfo Notice =
    GlobalNotice_NoticeInfo_Notice;
  static const NoticeInfo ItemInfo =
    GlobalNotice_NoticeInfo_ItemInfo;
  static inline bool NoticeInfo_IsValid(int value) {
    return GlobalNotice_NoticeInfo_IsValid(value);
  }
  static const NoticeInfo NoticeInfo_MIN =
    GlobalNotice_NoticeInfo_NoticeInfo_MIN;
  static const NoticeInfo NoticeInfo_MAX =
    GlobalNotice_NoticeInfo_NoticeInfo_MAX;
  static const int NoticeInfo_ARRAYSIZE =
    GlobalNotice_NoticeInfo_NoticeInfo_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NoticeInfo_descriptor() {
    return GlobalNotice_NoticeInfo_descriptor();
  }
  static inline const ::std::string& NoticeInfo_Name(NoticeInfo value) {
    return GlobalNotice_NoticeInfo_Name(value);
  }
  static inline bool NoticeInfo_Parse(const ::std::string& name,
      NoticeInfo* value) {
    return GlobalNotice_NoticeInfo_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 victim = 4;
  int victim_size() const;
  void clear_victim();
  static const int kVictimFieldNumber = 4;
  ::google::protobuf::int32 victim(int index) const;
  void set_victim(int index, ::google::protobuf::int32 value);
  void add_victim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      victim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_victim();

  // string notice = 2;
  void clear_notice();
  static const int kNoticeFieldNumber = 2;
  const ::std::string& notice() const;
  void set_notice(const ::std::string& value);
  #if LANG_CXX11
  void set_notice(::std::string&& value);
  #endif
  void set_notice(const char* value);
  void set_notice(const char* value, size_t size);
  ::std::string* mutable_notice();
  ::std::string* release_notice();
  void set_allocated_notice(::std::string* notice);

  // .server2N.GlobalNotice.NoticeInfo notiType = 1;
  void clear_notitype();
  static const int kNotiTypeFieldNumber = 1;
  ::server2N::GlobalNotice_NoticeInfo notitype() const;
  void set_notitype(::server2N::GlobalNotice_NoticeInfo value);

  // int32 performer = 3;
  void clear_performer();
  static const int kPerformerFieldNumber = 3;
  ::google::protobuf::int32 performer() const;
  void set_performer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:server2N.GlobalNotice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > victim_;
  mutable int _victim_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr notice_;
  int notitype_;
  ::google::protobuf::int32 performer_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsGlobalNoticeImpl();
};
// -------------------------------------------------------------------

class UserConnection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.UserConnection) */ {
 public:
  UserConnection();
  virtual ~UserConnection();

  UserConnection(const UserConnection& from);

  inline UserConnection& operator=(const UserConnection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserConnection(UserConnection&& from) noexcept
    : UserConnection() {
    *this = ::std::move(from);
  }

  inline UserConnection& operator=(UserConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConnection* internal_default_instance() {
    return reinterpret_cast<const UserConnection*>(
               &_UserConnection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UserConnection* other);
  friend void swap(UserConnection& a, UserConnection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserConnection* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UserConnection>(NULL);
  }

  UserConnection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UserConnection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserConnection& from);
  void MergeFrom(const UserConnection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserConnection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserConnection_ConnectionType ConnectionType;
  static const ConnectionType Nothing =
    UserConnection_ConnectionType_Nothing;
  static const ConnectionType Connect =
    UserConnection_ConnectionType_Connect;
  static const ConnectionType TryConnect =
    UserConnection_ConnectionType_TryConnect;
  static const ConnectionType AcceptConnect =
    UserConnection_ConnectionType_AcceptConnect;
  static const ConnectionType DisConnect =
    UserConnection_ConnectionType_DisConnect;
  static inline bool ConnectionType_IsValid(int value) {
    return UserConnection_ConnectionType_IsValid(value);
  }
  static const ConnectionType ConnectionType_MIN =
    UserConnection_ConnectionType_ConnectionType_MIN;
  static const ConnectionType ConnectionType_MAX =
    UserConnection_ConnectionType_ConnectionType_MAX;
  static const int ConnectionType_ARRAYSIZE =
    UserConnection_ConnectionType_ConnectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectionType_descriptor() {
    return UserConnection_ConnectionType_descriptor();
  }
  static inline const ::std::string& ConnectionType_Name(ConnectionType value) {
    return UserConnection_ConnectionType_Name(value);
  }
  static inline bool ConnectionType_Parse(const ::std::string& name,
      ConnectionType* value) {
    return UserConnection_ConnectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 connectorId = 1;
  int connectorid_size() const;
  void clear_connectorid();
  static const int kConnectorIdFieldNumber = 1;
  ::google::protobuf::int32 connectorid(int index) const;
  void set_connectorid(int index, ::google::protobuf::int32 value);
  void add_connectorid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      connectorid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_connectorid();

  // repeated int32 killInfo = 2;
  int killinfo_size() const;
  void clear_killinfo();
  static const int kKillInfoFieldNumber = 2;
  ::google::protobuf::int32 killinfo(int index) const;
  void set_killinfo(int index, ::google::protobuf::int32 value);
  void add_killinfo(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      killinfo() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_killinfo();

  // repeated int32 deathInfo = 3;
  int deathinfo_size() const;
  void clear_deathinfo();
  static const int kDeathInfoFieldNumber = 3;
  ::google::protobuf::int32 deathinfo(int index) const;
  void set_deathinfo(int index, ::google::protobuf::int32 value);
  void add_deathinfo(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      deathinfo() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_deathinfo();

  // repeated string nickname = 4;
  int nickname_size() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  const ::std::string& nickname(int index) const;
  ::std::string* mutable_nickname(int index);
  void set_nickname(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(int index, ::std::string&& value);
  #endif
  void set_nickname(int index, const char* value);
  void set_nickname(int index, const char* value, size_t size);
  ::std::string* add_nickname();
  void add_nickname(const ::std::string& value);
  #if LANG_CXX11
  void add_nickname(::std::string&& value);
  #endif
  void add_nickname(const char* value);
  void add_nickname(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& nickname() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nickname();

  // repeated .server2N.InfoItem item = 5;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 5;
  ::server2N::InfoItem* mutable_item(int index);
  ::google::protobuf::RepeatedPtrField< ::server2N::InfoItem >*
      mutable_item();
  const ::server2N::InfoItem& item(int index) const;
  ::server2N::InfoItem* add_item();
  const ::google::protobuf::RepeatedPtrField< ::server2N::InfoItem >&
      item() const;

  // .server2N.UserConnection.ConnectionType conType = 6;
  void clear_contype();
  static const int kConTypeFieldNumber = 6;
  ::server2N::UserConnection_ConnectionType contype() const;
  void set_contype(::server2N::UserConnection_ConnectionType value);

  // @@protoc_insertion_point(class_scope:server2N.UserConnection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > connectorid_;
  mutable int _connectorid_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > killinfo_;
  mutable int _killinfo_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > deathinfo_;
  mutable int _deathinfo_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nickname_;
  ::google::protobuf::RepeatedPtrField< ::server2N::InfoItem > item_;
  int contype_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsUserConnectionImpl();
};
// -------------------------------------------------------------------

class EventMove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventMove) */ {
 public:
  EventMove();
  virtual ~EventMove();

  EventMove(const EventMove& from);

  inline EventMove& operator=(const EventMove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventMove(EventMove&& from) noexcept
    : EventMove() {
    *this = ::std::move(from);
  }

  inline EventMove& operator=(EventMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventMove* internal_default_instance() {
    return reinterpret_cast<const EventMove*>(
               &_EventMove_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EventMove* other);
  friend void swap(EventMove& a, EventMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventMove* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventMove>(NULL);
  }

  EventMove* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventMove>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventMove& from);
  void MergeFrom(const EventMove& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventMove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EventMove_Direction Direction;
  static const Direction Nothing =
    EventMove_Direction_Nothing;
  static const Direction Left =
    EventMove_Direction_Left;
  static const Direction Right =
    EventMove_Direction_Right;
  static const Direction Down =
    EventMove_Direction_Down;
  static const Direction Up =
    EventMove_Direction_Up;
  static inline bool Direction_IsValid(int value) {
    return EventMove_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    EventMove_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    EventMove_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    EventMove_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return EventMove_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return EventMove_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return EventMove_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .server2N.EventMove.Direction type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::server2N::EventMove_Direction type() const;
  void set_type(::server2N::EventMove_Direction value);

  // @@protoc_insertion_point(class_scope:server2N.EventMove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventMoveImpl();
};
// -------------------------------------------------------------------

class EventStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventStop) */ {
 public:
  EventStop();
  virtual ~EventStop();

  EventStop(const EventStop& from);

  inline EventStop& operator=(const EventStop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventStop(EventStop&& from) noexcept
    : EventStop() {
    *this = ::std::move(from);
  }

  inline EventStop& operator=(EventStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventStop* internal_default_instance() {
    return reinterpret_cast<const EventStop*>(
               &_EventStop_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(EventStop* other);
  friend void swap(EventStop& a, EventStop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventStop* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventStop>(NULL);
  }

  EventStop* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventStop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventStop& from);
  void MergeFrom(const EventStop& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server2N.EventStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventStopImpl();
};
// -------------------------------------------------------------------

class EventJump : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventJump) */ {
 public:
  EventJump();
  virtual ~EventJump();

  EventJump(const EventJump& from);

  inline EventJump& operator=(const EventJump& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventJump(EventJump&& from) noexcept
    : EventJump() {
    *this = ::std::move(from);
  }

  inline EventJump& operator=(EventJump&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventJump& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventJump* internal_default_instance() {
    return reinterpret_cast<const EventJump*>(
               &_EventJump_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(EventJump* other);
  friend void swap(EventJump& a, EventJump& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventJump* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventJump>(NULL);
  }

  EventJump* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventJump>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventJump& from);
  void MergeFrom(const EventJump& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventJump* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server2N.EventJump)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventJumpImpl();
};
// -------------------------------------------------------------------

class EventShoot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventShoot) */ {
 public:
  EventShoot();
  virtual ~EventShoot();

  EventShoot(const EventShoot& from);

  inline EventShoot& operator=(const EventShoot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventShoot(EventShoot&& from) noexcept
    : EventShoot() {
    *this = ::std::move(from);
  }

  inline EventShoot& operator=(EventShoot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventShoot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventShoot* internal_default_instance() {
    return reinterpret_cast<const EventShoot*>(
               &_EventShoot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(EventShoot* other);
  friend void swap(EventShoot& a, EventShoot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventShoot* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventShoot>(NULL);
  }

  EventShoot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventShoot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventShoot& from);
  void MergeFrom(const EventShoot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventShoot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 shootType = 1;
  void clear_shoottype();
  static const int kShootTypeFieldNumber = 1;
  ::google::protobuf::int32 shoottype() const;
  void set_shoottype(::google::protobuf::int32 value);

  // float bulletSpeed = 2;
  void clear_bulletspeed();
  static const int kBulletSpeedFieldNumber = 2;
  float bulletspeed() const;
  void set_bulletspeed(float value);

  // float bulletRange = 3;
  void clear_bulletrange();
  static const int kBulletRangeFieldNumber = 3;
  float bulletrange() const;
  void set_bulletrange(float value);

  // float shootAngle = 4;
  void clear_shootangle();
  static const int kShootAngleFieldNumber = 4;
  float shootangle() const;
  void set_shootangle(float value);

  // float damage = 5;
  void clear_damage();
  static const int kDamageFieldNumber = 5;
  float damage() const;
  void set_damage(float value);

  // float impactScale = 6;
  void clear_impactscale();
  static const int kImpactScaleFieldNumber = 6;
  float impactscale() const;
  void set_impactscale(float value);

  // @@protoc_insertion_point(class_scope:server2N.EventShoot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 shoottype_;
  float bulletspeed_;
  float bulletrange_;
  float shootangle_;
  float damage_;
  float impactscale_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventShootImpl();
};
// -------------------------------------------------------------------

class EventHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventHit) */ {
 public:
  EventHit();
  virtual ~EventHit();

  EventHit(const EventHit& from);

  inline EventHit& operator=(const EventHit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventHit(EventHit&& from) noexcept
    : EventHit() {
    *this = ::std::move(from);
  }

  inline EventHit& operator=(EventHit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventHit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventHit* internal_default_instance() {
    return reinterpret_cast<const EventHit*>(
               &_EventHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(EventHit* other);
  friend void swap(EventHit& a, EventHit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventHit* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventHit>(NULL);
  }

  EventHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventHit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventHit& from);
  void MergeFrom(const EventHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 hitType = 1;
  void clear_hittype();
  static const int kHitTypeFieldNumber = 1;
  ::google::protobuf::int32 hittype() const;
  void set_hittype(::google::protobuf::int32 value);

  // float damage = 2;
  void clear_damage();
  static const int kDamageFieldNumber = 2;
  float damage() const;
  void set_damage(float value);

  // float impactX = 3;
  void clear_impactx();
  static const int kImpactXFieldNumber = 3;
  float impactx() const;
  void set_impactx(float value);

  // float impactY = 4;
  void clear_impacty();
  static const int kImpactYFieldNumber = 4;
  float impacty() const;
  void set_impacty(float value);

  // float currentHP = 5;
  void clear_currenthp();
  static const int kCurrentHPFieldNumber = 5;
  float currenthp() const;
  void set_currenthp(float value);

  // int32 attacker = 6;
  void clear_attacker();
  static const int kAttackerFieldNumber = 6;
  ::google::protobuf::int32 attacker() const;
  void set_attacker(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:server2N.EventHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 hittype_;
  float damage_;
  float impactx_;
  float impacty_;
  float currenthp_;
  ::google::protobuf::int32 attacker_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventHitImpl();
};
// -------------------------------------------------------------------

class EventChangeWeapon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventChangeWeapon) */ {
 public:
  EventChangeWeapon();
  virtual ~EventChangeWeapon();

  EventChangeWeapon(const EventChangeWeapon& from);

  inline EventChangeWeapon& operator=(const EventChangeWeapon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventChangeWeapon(EventChangeWeapon&& from) noexcept
    : EventChangeWeapon() {
    *this = ::std::move(from);
  }

  inline EventChangeWeapon& operator=(EventChangeWeapon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventChangeWeapon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventChangeWeapon* internal_default_instance() {
    return reinterpret_cast<const EventChangeWeapon*>(
               &_EventChangeWeapon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(EventChangeWeapon* other);
  friend void swap(EventChangeWeapon& a, EventChangeWeapon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventChangeWeapon* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventChangeWeapon>(NULL);
  }

  EventChangeWeapon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventChangeWeapon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventChangeWeapon& from);
  void MergeFrom(const EventChangeWeapon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventChangeWeapon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 weaponId = 1;
  void clear_weaponid();
  static const int kWeaponIdFieldNumber = 1;
  ::google::protobuf::int32 weaponid() const;
  void set_weaponid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:server2N.EventChangeWeapon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 weaponid_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventChangeWeaponImpl();
};
// -------------------------------------------------------------------

class EventSpawn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventSpawn) */ {
 public:
  EventSpawn();
  virtual ~EventSpawn();

  EventSpawn(const EventSpawn& from);

  inline EventSpawn& operator=(const EventSpawn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventSpawn(EventSpawn&& from) noexcept
    : EventSpawn() {
    *this = ::std::move(from);
  }

  inline EventSpawn& operator=(EventSpawn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventSpawn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSpawn* internal_default_instance() {
    return reinterpret_cast<const EventSpawn*>(
               &_EventSpawn_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(EventSpawn* other);
  friend void swap(EventSpawn& a, EventSpawn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventSpawn* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventSpawn>(NULL);
  }

  EventSpawn* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventSpawn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventSpawn& from);
  void MergeFrom(const EventSpawn& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventSpawn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server2N.EventSpawn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventSpawnImpl();
};
// -------------------------------------------------------------------

class EventUserSync : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventUserSync) */ {
 public:
  EventUserSync();
  virtual ~EventUserSync();

  EventUserSync(const EventUserSync& from);

  inline EventUserSync& operator=(const EventUserSync& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventUserSync(EventUserSync&& from) noexcept
    : EventUserSync() {
    *this = ::std::move(from);
  }

  inline EventUserSync& operator=(EventUserSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventUserSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventUserSync* internal_default_instance() {
    return reinterpret_cast<const EventUserSync*>(
               &_EventUserSync_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(EventUserSync* other);
  friend void swap(EventUserSync& a, EventUserSync& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventUserSync* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventUserSync>(NULL);
  }

  EventUserSync* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventUserSync>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventUserSync& from);
  void MergeFrom(const EventUserSync& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventUserSync* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float currentHP = 1;
  void clear_currenthp();
  static const int kCurrentHPFieldNumber = 1;
  float currenthp() const;
  void set_currenthp(float value);

  // int32 weaponId = 2;
  void clear_weaponid();
  static const int kWeaponIdFieldNumber = 2;
  ::google::protobuf::int32 weaponid() const;
  void set_weaponid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:server2N.EventUserSync)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float currenthp_;
  ::google::protobuf::int32 weaponid_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventUserSyncImpl();
};
// -------------------------------------------------------------------

class EventDeath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventDeath) */ {
 public:
  EventDeath();
  virtual ~EventDeath();

  EventDeath(const EventDeath& from);

  inline EventDeath& operator=(const EventDeath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventDeath(EventDeath&& from) noexcept
    : EventDeath() {
    *this = ::std::move(from);
  }

  inline EventDeath& operator=(EventDeath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDeath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventDeath* internal_default_instance() {
    return reinterpret_cast<const EventDeath*>(
               &_EventDeath_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(EventDeath* other);
  friend void swap(EventDeath& a, EventDeath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventDeath* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventDeath>(NULL);
  }

  EventDeath* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventDeath>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventDeath& from);
  void MergeFrom(const EventDeath& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventDeath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 triggerId = 1;
  void clear_triggerid();
  static const int kTriggerIdFieldNumber = 1;
  ::google::protobuf::int32 triggerid() const;
  void set_triggerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:server2N.EventDeath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 triggerid_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventDeathImpl();
};
// -------------------------------------------------------------------

class EventItemSpawn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventItemSpawn) */ {
 public:
  EventItemSpawn();
  virtual ~EventItemSpawn();

  EventItemSpawn(const EventItemSpawn& from);

  inline EventItemSpawn& operator=(const EventItemSpawn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventItemSpawn(EventItemSpawn&& from) noexcept
    : EventItemSpawn() {
    *this = ::std::move(from);
  }

  inline EventItemSpawn& operator=(EventItemSpawn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventItemSpawn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventItemSpawn* internal_default_instance() {
    return reinterpret_cast<const EventItemSpawn*>(
               &_EventItemSpawn_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(EventItemSpawn* other);
  friend void swap(EventItemSpawn& a, EventItemSpawn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventItemSpawn* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventItemSpawn>(NULL);
  }

  EventItemSpawn* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventItemSpawn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventItemSpawn& from);
  void MergeFrom(const EventItemSpawn& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventItemSpawn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .server2N.InfoItem item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::server2N::InfoItem& item() const;
  ::server2N::InfoItem* release_item();
  ::server2N::InfoItem* mutable_item();
  void set_allocated_item(::server2N::InfoItem* item);

  // @@protoc_insertion_point(class_scope:server2N.EventItemSpawn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server2N::InfoItem* item_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventItemSpawnImpl();
};
// -------------------------------------------------------------------

class EventItemGet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventItemGet) */ {
 public:
  EventItemGet();
  virtual ~EventItemGet();

  EventItemGet(const EventItemGet& from);

  inline EventItemGet& operator=(const EventItemGet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventItemGet(EventItemGet&& from) noexcept
    : EventItemGet() {
    *this = ::std::move(from);
  }

  inline EventItemGet& operator=(EventItemGet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventItemGet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventItemGet* internal_default_instance() {
    return reinterpret_cast<const EventItemGet*>(
               &_EventItemGet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(EventItemGet* other);
  friend void swap(EventItemGet& a, EventItemGet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventItemGet* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventItemGet>(NULL);
  }

  EventItemGet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventItemGet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventItemGet& from);
  void MergeFrom(const EventItemGet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventItemGet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .server2N.InfoItem item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::server2N::InfoItem& item() const;
  ::server2N::InfoItem* release_item();
  ::server2N::InfoItem* mutable_item();
  void set_allocated_item(::server2N::InfoItem* item);

  // @@protoc_insertion_point(class_scope:server2N.EventItemGet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server2N::InfoItem* item_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventItemGetImpl();
};
// -------------------------------------------------------------------

class EventCam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.EventCam) */ {
 public:
  EventCam();
  virtual ~EventCam();

  EventCam(const EventCam& from);

  inline EventCam& operator=(const EventCam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventCam(EventCam&& from) noexcept
    : EventCam() {
    *this = ::std::move(from);
  }

  inline EventCam& operator=(EventCam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventCam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventCam* internal_default_instance() {
    return reinterpret_cast<const EventCam*>(
               &_EventCam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(EventCam* other);
  friend void swap(EventCam& a, EventCam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventCam* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventCam>(NULL);
  }

  EventCam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EventCam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventCam& from);
  void MergeFrom(const EventCam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventCam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool isCamOff = 1;
  void clear_iscamoff();
  static const int kIsCamOffFieldNumber = 1;
  bool iscamoff() const;
  void set_iscamoff(bool value);

  // int32 targetID = 2;
  void clear_targetid();
  static const int kTargetIDFieldNumber = 2;
  ::google::protobuf::int32 targetid() const;
  void set_targetid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:server2N.EventCam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool iscamoff_;
  ::google::protobuf::int32 targetid_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsEventCamImpl();
};
// -------------------------------------------------------------------

class InfoItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.InfoItem) */ {
 public:
  InfoItem();
  virtual ~InfoItem();

  InfoItem(const InfoItem& from);

  inline InfoItem& operator=(const InfoItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoItem(InfoItem&& from) noexcept
    : InfoItem() {
    *this = ::std::move(from);
  }

  inline InfoItem& operator=(InfoItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoItem* internal_default_instance() {
    return reinterpret_cast<const InfoItem*>(
               &_InfoItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(InfoItem* other);
  friend void swap(InfoItem& a, InfoItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoItem* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<InfoItem>(NULL);
  }

  InfoItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<InfoItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfoItem& from);
  void MergeFrom(const InfoItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfoItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef InfoItem_ItemType ItemType;
  static const ItemType Recover =
    InfoItem_ItemType_Recover;
  static const ItemType Weapone =
    InfoItem_ItemType_Weapone;
  static inline bool ItemType_IsValid(int value) {
    return InfoItem_ItemType_IsValid(value);
  }
  static const ItemType ItemType_MIN =
    InfoItem_ItemType_ItemType_MIN;
  static const ItemType ItemType_MAX =
    InfoItem_ItemType_ItemType_MAX;
  static const int ItemType_ARRAYSIZE =
    InfoItem_ItemType_ItemType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ItemType_descriptor() {
    return InfoItem_ItemType_descriptor();
  }
  static inline const ::std::string& ItemType_Name(ItemType value) {
    return InfoItem_ItemType_Name(value);
  }
  static inline bool ItemType_Parse(const ::std::string& name,
      ItemType* value) {
    return InfoItem_ItemType_Parse(name, value);
  }

  typedef InfoItem_WeaponId WeaponId;
  static const WeaponId Nothing =
    InfoItem_WeaponId_Nothing;
  static const WeaponId Pistol =
    InfoItem_WeaponId_Pistol;
  static const WeaponId Sniper =
    InfoItem_WeaponId_Sniper;
  static inline bool WeaponId_IsValid(int value) {
    return InfoItem_WeaponId_IsValid(value);
  }
  static const WeaponId WeaponId_MIN =
    InfoItem_WeaponId_WeaponId_MIN;
  static const WeaponId WeaponId_MAX =
    InfoItem_WeaponId_WeaponId_MAX;
  static const int WeaponId_ARRAYSIZE =
    InfoItem_WeaponId_WeaponId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WeaponId_descriptor() {
    return InfoItem_WeaponId_descriptor();
  }
  static inline const ::std::string& WeaponId_Name(WeaponId value) {
    return InfoItem_WeaponId_Name(value);
  }
  static inline bool WeaponId_Parse(const ::std::string& name,
      WeaponId* value) {
    return InfoItem_WeaponId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string itemId = 2;
  void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  const ::std::string& itemid() const;
  void set_itemid(const ::std::string& value);
  #if LANG_CXX11
  void set_itemid(::std::string&& value);
  #endif
  void set_itemid(const char* value);
  void set_itemid(const char* value, size_t size);
  ::std::string* mutable_itemid();
  ::std::string* release_itemid();
  void set_allocated_itemid(::std::string* itemid);

  // int32 amount = 4;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // .server2N.InfoItem.ItemType itemType = 5;
  void clear_itemtype();
  static const int kItemTypeFieldNumber = 5;
  ::server2N::InfoItem_ItemType itemtype() const;
  void set_itemtype(::server2N::InfoItem_ItemType value);

  // .server2N.InfoItem.WeaponId weaponId = 6;
  void clear_weaponid();
  static const int kWeaponIdFieldNumber = 6;
  ::server2N::InfoItem_WeaponId weaponid() const;
  void set_weaponid(::server2N::InfoItem_WeaponId value);

  // float ItemPositionX = 7;
  void clear_itempositionx();
  static const int kItemPositionXFieldNumber = 7;
  float itempositionx() const;
  void set_itempositionx(float value);

  // float ItemPositionY = 8;
  void clear_itempositiony();
  static const int kItemPositionYFieldNumber = 8;
  float itempositiony() const;
  void set_itempositiony(float value);

  // @@protoc_insertion_point(class_scope:server2N.InfoItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr itemid_;
  ::google::protobuf::int32 amount_;
  int itemtype_;
  int weaponid_;
  float itempositionx_;
  float itempositiony_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsInfoItemImpl();
};
// -------------------------------------------------------------------

class GameEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.GameEvent) */ {
 public:
  GameEvent();
  virtual ~GameEvent();

  GameEvent(const GameEvent& from);

  inline GameEvent& operator=(const GameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent(GameEvent&& from) noexcept
    : GameEvent() {
    *this = ::std::move(from);
  }

  inline GameEvent& operator=(GameEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent* internal_default_instance() {
    return reinterpret_cast<const GameEvent*>(
               &_GameEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(GameEvent* other);
  friend void swap(GameEvent& a, GameEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameEvent>(NULL);
  }

  GameEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameEvent& from);
  void MergeFrom(const GameEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GameEvent_eventType eventType;
  static const eventType Nothing =
    GameEvent_eventType_Nothing;
  static const eventType UserEvent =
    GameEvent_eventType_UserEvent;
  static const eventType SystemEvent =
    GameEvent_eventType_SystemEvent;
  static inline bool eventType_IsValid(int value) {
    return GameEvent_eventType_IsValid(value);
  }
  static const eventType eventType_MIN =
    GameEvent_eventType_eventType_MIN;
  static const eventType eventType_MAX =
    GameEvent_eventType_eventType_MAX;
  static const int eventType_ARRAYSIZE =
    GameEvent_eventType_eventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eventType_descriptor() {
    return GameEvent_eventType_descriptor();
  }
  static inline const ::std::string& eventType_Name(eventType value) {
    return GameEvent_eventType_Name(value);
  }
  static inline bool eventType_Parse(const ::std::string& name,
      eventType* value) {
    return GameEvent_eventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 invokerId = 10;
  int invokerid_size() const;
  void clear_invokerid();
  static const int kInvokerIdFieldNumber = 10;
  ::google::protobuf::int32 invokerid(int index) const;
  void set_invokerid(int index, ::google::protobuf::int32 value);
  void add_invokerid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      invokerid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_invokerid();

  // .server2N.UserEvent userEvent = 3;
  bool has_userevent() const;
  void clear_userevent();
  static const int kUserEventFieldNumber = 3;
  const ::server2N::UserEvent& userevent() const;
  ::server2N::UserEvent* release_userevent();
  ::server2N::UserEvent* mutable_userevent();
  void set_allocated_userevent(::server2N::UserEvent* userevent);

  // .server2N.SystemEvent systemEvent = 4;
  bool has_systemevent() const;
  void clear_systemevent();
  static const int kSystemEventFieldNumber = 4;
  const ::server2N::SystemEvent& systemevent() const;
  ::server2N::SystemEvent* release_systemevent();
  ::server2N::SystemEvent* mutable_systemevent();
  void set_allocated_systemevent(::server2N::SystemEvent* systemevent);

  // float EventPositionX = 6;
  void clear_eventpositionx();
  static const int kEventPositionXFieldNumber = 6;
  float eventpositionx() const;
  void set_eventpositionx(float value);

  // float EventPositionY = 7;
  void clear_eventpositiony();
  static const int kEventPositionYFieldNumber = 7;
  float eventpositiony() const;
  void set_eventpositiony(float value);

  // float VelocityX = 8;
  void clear_velocityx();
  static const int kVelocityXFieldNumber = 8;
  float velocityx() const;
  void set_velocityx(float value);

  // float VelocityY = 9;
  void clear_velocityy();
  static const int kVelocityYFieldNumber = 9;
  float velocityy() const;
  void set_velocityy(float value);

  // bool isInterested = 11;
  void clear_isinterested();
  static const int kIsInterestedFieldNumber = 11;
  bool isinterested() const;
  void set_isinterested(bool value);

  // bool isLocal = 12;
  void clear_islocal();
  static const int kIsLocalFieldNumber = 12;
  bool islocal() const;
  void set_islocal(bool value);

  // .server2N.GameEvent.eventType evtType = 13;
  void clear_evttype();
  static const int kEvtTypeFieldNumber = 13;
  ::server2N::GameEvent_eventType evttype() const;
  void set_evttype(::server2N::GameEvent_eventType value);

  // @@protoc_insertion_point(class_scope:server2N.GameEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > invokerid_;
  mutable int _invokerid_cached_byte_size_;
  ::server2N::UserEvent* userevent_;
  ::server2N::SystemEvent* systemevent_;
  float eventpositionx_;
  float eventpositiony_;
  float velocityx_;
  float velocityy_;
  bool isinterested_;
  bool islocal_;
  int evttype_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsGameEventImpl();
};
// -------------------------------------------------------------------

class SystemEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.SystemEvent) */ {
 public:
  SystemEvent();
  virtual ~SystemEvent();

  SystemEvent(const SystemEvent& from);

  inline SystemEvent& operator=(const SystemEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemEvent(SystemEvent&& from) noexcept
    : SystemEvent() {
    *this = ::std::move(from);
  }

  inline SystemEvent& operator=(SystemEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemEvent* internal_default_instance() {
    return reinterpret_cast<const SystemEvent*>(
               &_SystemEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SystemEvent* other);
  friend void swap(SystemEvent& a, SystemEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemEvent* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SystemEvent>(NULL);
  }

  SystemEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SystemEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SystemEvent& from);
  void MergeFrom(const SystemEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SystemEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SystemEvent_action action;
  static const action Nothing =
    SystemEvent_action_Nothing;
  static const action EventItemSpawn =
    SystemEvent_action_EventItemSpawn;
  static const action EventItemGet =
    SystemEvent_action_EventItemGet;
  static inline bool action_IsValid(int value) {
    return SystemEvent_action_IsValid(value);
  }
  static const action action_MIN =
    SystemEvent_action_action_MIN;
  static const action action_MAX =
    SystemEvent_action_action_MAX;
  static const int action_ARRAYSIZE =
    SystemEvent_action_action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  action_descriptor() {
    return SystemEvent_action_descriptor();
  }
  static inline const ::std::string& action_Name(action value) {
    return SystemEvent_action_Name(value);
  }
  static inline bool action_Parse(const ::std::string& name,
      action* value) {
    return SystemEvent_action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .server2N.EventItemSpawn itemSpawnEvent = 203;
  bool has_itemspawnevent() const;
  void clear_itemspawnevent();
  static const int kItemSpawnEventFieldNumber = 203;
  const ::server2N::EventItemSpawn& itemspawnevent() const;
  ::server2N::EventItemSpawn* release_itemspawnevent();
  ::server2N::EventItemSpawn* mutable_itemspawnevent();
  void set_allocated_itemspawnevent(::server2N::EventItemSpawn* itemspawnevent);

  // .server2N.EventItemGet itemGetEvent = 204;
  bool has_itemgetevent() const;
  void clear_itemgetevent();
  static const int kItemGetEventFieldNumber = 204;
  const ::server2N::EventItemGet& itemgetevent() const;
  ::server2N::EventItemGet* release_itemgetevent();
  ::server2N::EventItemGet* mutable_itemgetevent();
  void set_allocated_itemgetevent(::server2N::EventItemGet* itemgetevent);

  // .server2N.SystemEvent.action actType = 202;
  void clear_acttype();
  static const int kActTypeFieldNumber = 202;
  ::server2N::SystemEvent_action acttype() const;
  void set_acttype(::server2N::SystemEvent_action value);

  // @@protoc_insertion_point(class_scope:server2N.SystemEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server2N::EventItemSpawn* itemspawnevent_;
  ::server2N::EventItemGet* itemgetevent_;
  int acttype_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsSystemEventImpl();
};
// -------------------------------------------------------------------

class UserEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.UserEvent) */ {
 public:
  UserEvent();
  virtual ~UserEvent();

  UserEvent(const UserEvent& from);

  inline UserEvent& operator=(const UserEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEvent(UserEvent&& from) noexcept
    : UserEvent() {
    *this = ::std::move(from);
  }

  inline UserEvent& operator=(UserEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEvent* internal_default_instance() {
    return reinterpret_cast<const UserEvent*>(
               &_UserEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(UserEvent* other);
  friend void swap(UserEvent& a, UserEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEvent* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UserEvent>(NULL);
  }

  UserEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UserEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserEvent& from);
  void MergeFrom(const UserEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEvent_action action;
  static const action Nothing =
    UserEvent_action_Nothing;
  static const action EventMove =
    UserEvent_action_EventMove;
  static const action EventStop =
    UserEvent_action_EventStop;
  static const action EventJump =
    UserEvent_action_EventJump;
  static const action EventShoot =
    UserEvent_action_EventShoot;
  static const action EventHit =
    UserEvent_action_EventHit;
  static const action EventSpawn =
    UserEvent_action_EventSpawn;
  static const action EventUserSync =
    UserEvent_action_EventUserSync;
  static const action EventDeath =
    UserEvent_action_EventDeath;
  static const action EventBullet =
    UserEvent_action_EventBullet;
  static const action EventChangeWeapon =
    UserEvent_action_EventChangeWeapon;
  static const action EventCam =
    UserEvent_action_EventCam;
  static inline bool action_IsValid(int value) {
    return UserEvent_action_IsValid(value);
  }
  static const action action_MIN =
    UserEvent_action_action_MIN;
  static const action action_MAX =
    UserEvent_action_action_MAX;
  static const int action_ARRAYSIZE =
    UserEvent_action_action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  action_descriptor() {
    return UserEvent_action_descriptor();
  }
  static inline const ::std::string& action_Name(action value) {
    return UserEvent_action_Name(value);
  }
  static inline bool action_Parse(const ::std::string& name,
      action* value) {
    return UserEvent_action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .server2N.EventMove moveEvent = 111;
  bool has_moveevent() const;
  void clear_moveevent();
  static const int kMoveEventFieldNumber = 111;
  const ::server2N::EventMove& moveevent() const;
  ::server2N::EventMove* release_moveevent();
  ::server2N::EventMove* mutable_moveevent();
  void set_allocated_moveevent(::server2N::EventMove* moveevent);

  // .server2N.EventStop stopEvent = 112;
  bool has_stopevent() const;
  void clear_stopevent();
  static const int kStopEventFieldNumber = 112;
  const ::server2N::EventStop& stopevent() const;
  ::server2N::EventStop* release_stopevent();
  ::server2N::EventStop* mutable_stopevent();
  void set_allocated_stopevent(::server2N::EventStop* stopevent);

  // .server2N.EventJump jumpEvent = 113;
  bool has_jumpevent() const;
  void clear_jumpevent();
  static const int kJumpEventFieldNumber = 113;
  const ::server2N::EventJump& jumpevent() const;
  ::server2N::EventJump* release_jumpevent();
  ::server2N::EventJump* mutable_jumpevent();
  void set_allocated_jumpevent(::server2N::EventJump* jumpevent);

  // .server2N.EventShoot shootEvent = 114;
  bool has_shootevent() const;
  void clear_shootevent();
  static const int kShootEventFieldNumber = 114;
  const ::server2N::EventShoot& shootevent() const;
  ::server2N::EventShoot* release_shootevent();
  ::server2N::EventShoot* mutable_shootevent();
  void set_allocated_shootevent(::server2N::EventShoot* shootevent);

  // .server2N.EventHit hitEvent = 115;
  bool has_hitevent() const;
  void clear_hitevent();
  static const int kHitEventFieldNumber = 115;
  const ::server2N::EventHit& hitevent() const;
  ::server2N::EventHit* release_hitevent();
  ::server2N::EventHit* mutable_hitevent();
  void set_allocated_hitevent(::server2N::EventHit* hitevent);

  // .server2N.EventSpawn spawnEvent = 116;
  bool has_spawnevent() const;
  void clear_spawnevent();
  static const int kSpawnEventFieldNumber = 116;
  const ::server2N::EventSpawn& spawnevent() const;
  ::server2N::EventSpawn* release_spawnevent();
  ::server2N::EventSpawn* mutable_spawnevent();
  void set_allocated_spawnevent(::server2N::EventSpawn* spawnevent);

  // .server2N.EventUserSync syncEvent = 117;
  bool has_syncevent() const;
  void clear_syncevent();
  static const int kSyncEventFieldNumber = 117;
  const ::server2N::EventUserSync& syncevent() const;
  ::server2N::EventUserSync* release_syncevent();
  ::server2N::EventUserSync* mutable_syncevent();
  void set_allocated_syncevent(::server2N::EventUserSync* syncevent);

  // .server2N.EventDeath deathEvent = 118;
  bool has_deathevent() const;
  void clear_deathevent();
  static const int kDeathEventFieldNumber = 118;
  const ::server2N::EventDeath& deathevent() const;
  ::server2N::EventDeath* release_deathevent();
  ::server2N::EventDeath* mutable_deathevent();
  void set_allocated_deathevent(::server2N::EventDeath* deathevent);

  // .server2N.EventChangeWeapon chWeaponEvent = 119;
  bool has_chweaponevent() const;
  void clear_chweaponevent();
  static const int kChWeaponEventFieldNumber = 119;
  const ::server2N::EventChangeWeapon& chweaponevent() const;
  ::server2N::EventChangeWeapon* release_chweaponevent();
  ::server2N::EventChangeWeapon* mutable_chweaponevent();
  void set_allocated_chweaponevent(::server2N::EventChangeWeapon* chweaponevent);

  // .server2N.EventItemSpawn itemSpawnEvent = 120;
  bool has_itemspawnevent() const;
  void clear_itemspawnevent();
  static const int kItemSpawnEventFieldNumber = 120;
  const ::server2N::EventItemSpawn& itemspawnevent() const;
  ::server2N::EventItemSpawn* release_itemspawnevent();
  ::server2N::EventItemSpawn* mutable_itemspawnevent();
  void set_allocated_itemspawnevent(::server2N::EventItemSpawn* itemspawnevent);

  // .server2N.EventItemGet itemGetEvent = 121;
  bool has_itemgetevent() const;
  void clear_itemgetevent();
  static const int kItemGetEventFieldNumber = 121;
  const ::server2N::EventItemGet& itemgetevent() const;
  ::server2N::EventItemGet* release_itemgetevent();
  ::server2N::EventItemGet* mutable_itemgetevent();
  void set_allocated_itemgetevent(::server2N::EventItemGet* itemgetevent);

  // .server2N.EventCam camEvent = 123;
  bool has_camevent() const;
  void clear_camevent();
  static const int kCamEventFieldNumber = 123;
  const ::server2N::EventCam& camevent() const;
  ::server2N::EventCam* release_camevent();
  ::server2N::EventCam* mutable_camevent();
  void set_allocated_camevent(::server2N::EventCam* camevent);

  // .server2N.UserEvent.action actType = 110;
  void clear_acttype();
  static const int kActTypeFieldNumber = 110;
  ::server2N::UserEvent_action acttype() const;
  void set_acttype(::server2N::UserEvent_action value);

  // @@protoc_insertion_point(class_scope:server2N.UserEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server2N::EventMove* moveevent_;
  ::server2N::EventStop* stopevent_;
  ::server2N::EventJump* jumpevent_;
  ::server2N::EventShoot* shootevent_;
  ::server2N::EventHit* hitevent_;
  ::server2N::EventSpawn* spawnevent_;
  ::server2N::EventUserSync* syncevent_;
  ::server2N::EventDeath* deathevent_;
  ::server2N::EventChangeWeapon* chweaponevent_;
  ::server2N::EventItemSpawn* itemspawnevent_;
  ::server2N::EventItemGet* itemgetevent_;
  ::server2N::EventCam* camevent_;
  int acttype_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsUserEventImpl();
};
// -------------------------------------------------------------------

class PacketBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2N.PacketBody) */ {
 public:
  PacketBody();
  virtual ~PacketBody();

  PacketBody(const PacketBody& from);

  inline PacketBody& operator=(const PacketBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PacketBody(PacketBody&& from) noexcept
    : PacketBody() {
    *this = ::std::move(from);
  }

  inline PacketBody& operator=(PacketBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketBody* internal_default_instance() {
    return reinterpret_cast<const PacketBody*>(
               &_PacketBody_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(PacketBody* other);
  friend void swap(PacketBody& a, PacketBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PacketBody* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PacketBody>(NULL);
  }

  PacketBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PacketBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PacketBody& from);
  void MergeFrom(const PacketBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PacketBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PacketBody_messageType messageType;
  static const messageType GameEvent =
    PacketBody_messageType_GameEvent;
  static const messageType UserConnection =
    PacketBody_messageType_UserConnection;
  static const messageType GlobalNotice =
    PacketBody_messageType_GlobalNotice;
  static inline bool messageType_IsValid(int value) {
    return PacketBody_messageType_IsValid(value);
  }
  static const messageType messageType_MIN =
    PacketBody_messageType_messageType_MIN;
  static const messageType messageType_MAX =
    PacketBody_messageType_messageType_MAX;
  static const int messageType_ARRAYSIZE =
    PacketBody_messageType_messageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  messageType_descriptor() {
    return PacketBody_messageType_descriptor();
  }
  static inline const ::std::string& messageType_Name(messageType value) {
    return PacketBody_messageType_Name(value);
  }
  static inline bool messageType_Parse(const ::std::string& name,
      messageType* value) {
    return PacketBody_messageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .server2N.UserConnection connect = 6;
  bool has_connect() const;
  void clear_connect();
  static const int kConnectFieldNumber = 6;
  const ::server2N::UserConnection& connect() const;
  ::server2N::UserConnection* release_connect();
  ::server2N::UserConnection* mutable_connect();
  void set_allocated_connect(::server2N::UserConnection* connect);

  // .server2N.GameEvent event = 7;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 7;
  const ::server2N::GameEvent& event() const;
  ::server2N::GameEvent* release_event();
  ::server2N::GameEvent* mutable_event();
  void set_allocated_event(::server2N::GameEvent* event);

  // .server2N.GlobalNotice notice = 10001;
  bool has_notice() const;
  void clear_notice();
  static const int kNoticeFieldNumber = 10001;
  const ::server2N::GlobalNotice& notice() const;
  ::server2N::GlobalNotice* release_notice();
  ::server2N::GlobalNotice* mutable_notice();
  void set_allocated_notice(::server2N::GlobalNotice* notice);

  // int32 senderId = 8;
  void clear_senderid();
  static const int kSenderIdFieldNumber = 8;
  ::google::protobuf::int32 senderid() const;
  void set_senderid(::google::protobuf::int32 value);

  // .server2N.PacketBody.messageType msgType = 10000;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 10000;
  ::server2N::PacketBody_messageType msgtype() const;
  void set_msgtype(::server2N::PacketBody_messageType value);

  // @@protoc_insertion_point(class_scope:server2N.PacketBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server2N::UserConnection* connect_;
  ::server2N::GameEvent* event_;
  ::server2N::GlobalNotice* notice_;
  ::google::protobuf::int32 senderid_;
  int msgtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameContent_2eproto::TableStruct;
  friend void ::protobuf_gameContent_2eproto::InitDefaultsPacketBodyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GlobalNotice

// .server2N.GlobalNotice.NoticeInfo notiType = 1;
inline void GlobalNotice::clear_notitype() {
  notitype_ = 0;
}
inline ::server2N::GlobalNotice_NoticeInfo GlobalNotice::notitype() const {
  // @@protoc_insertion_point(field_get:server2N.GlobalNotice.notiType)
  return static_cast< ::server2N::GlobalNotice_NoticeInfo >(notitype_);
}
inline void GlobalNotice::set_notitype(::server2N::GlobalNotice_NoticeInfo value) {
  
  notitype_ = value;
  // @@protoc_insertion_point(field_set:server2N.GlobalNotice.notiType)
}

// string notice = 2;
inline void GlobalNotice::clear_notice() {
  notice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GlobalNotice::notice() const {
  // @@protoc_insertion_point(field_get:server2N.GlobalNotice.notice)
  return notice_.GetNoArena();
}
inline void GlobalNotice::set_notice(const ::std::string& value) {
  
  notice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server2N.GlobalNotice.notice)
}
#if LANG_CXX11
inline void GlobalNotice::set_notice(::std::string&& value) {
  
  notice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server2N.GlobalNotice.notice)
}
#endif
inline void GlobalNotice::set_notice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  notice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server2N.GlobalNotice.notice)
}
inline void GlobalNotice::set_notice(const char* value, size_t size) {
  
  notice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server2N.GlobalNotice.notice)
}
inline ::std::string* GlobalNotice::mutable_notice() {
  
  // @@protoc_insertion_point(field_mutable:server2N.GlobalNotice.notice)
  return notice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GlobalNotice::release_notice() {
  // @@protoc_insertion_point(field_release:server2N.GlobalNotice.notice)
  
  return notice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalNotice::set_allocated_notice(::std::string* notice) {
  if (notice != NULL) {
    
  } else {
    
  }
  notice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notice);
  // @@protoc_insertion_point(field_set_allocated:server2N.GlobalNotice.notice)
}

// int32 performer = 3;
inline void GlobalNotice::clear_performer() {
  performer_ = 0;
}
inline ::google::protobuf::int32 GlobalNotice::performer() const {
  // @@protoc_insertion_point(field_get:server2N.GlobalNotice.performer)
  return performer_;
}
inline void GlobalNotice::set_performer(::google::protobuf::int32 value) {
  
  performer_ = value;
  // @@protoc_insertion_point(field_set:server2N.GlobalNotice.performer)
}

// repeated int32 victim = 4;
inline int GlobalNotice::victim_size() const {
  return victim_.size();
}
inline void GlobalNotice::clear_victim() {
  victim_.Clear();
}
inline ::google::protobuf::int32 GlobalNotice::victim(int index) const {
  // @@protoc_insertion_point(field_get:server2N.GlobalNotice.victim)
  return victim_.Get(index);
}
inline void GlobalNotice::set_victim(int index, ::google::protobuf::int32 value) {
  victim_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2N.GlobalNotice.victim)
}
inline void GlobalNotice::add_victim(::google::protobuf::int32 value) {
  victim_.Add(value);
  // @@protoc_insertion_point(field_add:server2N.GlobalNotice.victim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GlobalNotice::victim() const {
  // @@protoc_insertion_point(field_list:server2N.GlobalNotice.victim)
  return victim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GlobalNotice::mutable_victim() {
  // @@protoc_insertion_point(field_mutable_list:server2N.GlobalNotice.victim)
  return &victim_;
}

// -------------------------------------------------------------------

// UserConnection

// repeated int32 connectorId = 1;
inline int UserConnection::connectorid_size() const {
  return connectorid_.size();
}
inline void UserConnection::clear_connectorid() {
  connectorid_.Clear();
}
inline ::google::protobuf::int32 UserConnection::connectorid(int index) const {
  // @@protoc_insertion_point(field_get:server2N.UserConnection.connectorId)
  return connectorid_.Get(index);
}
inline void UserConnection::set_connectorid(int index, ::google::protobuf::int32 value) {
  connectorid_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2N.UserConnection.connectorId)
}
inline void UserConnection::add_connectorid(::google::protobuf::int32 value) {
  connectorid_.Add(value);
  // @@protoc_insertion_point(field_add:server2N.UserConnection.connectorId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConnection::connectorid() const {
  // @@protoc_insertion_point(field_list:server2N.UserConnection.connectorId)
  return connectorid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConnection::mutable_connectorid() {
  // @@protoc_insertion_point(field_mutable_list:server2N.UserConnection.connectorId)
  return &connectorid_;
}

// repeated int32 killInfo = 2;
inline int UserConnection::killinfo_size() const {
  return killinfo_.size();
}
inline void UserConnection::clear_killinfo() {
  killinfo_.Clear();
}
inline ::google::protobuf::int32 UserConnection::killinfo(int index) const {
  // @@protoc_insertion_point(field_get:server2N.UserConnection.killInfo)
  return killinfo_.Get(index);
}
inline void UserConnection::set_killinfo(int index, ::google::protobuf::int32 value) {
  killinfo_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2N.UserConnection.killInfo)
}
inline void UserConnection::add_killinfo(::google::protobuf::int32 value) {
  killinfo_.Add(value);
  // @@protoc_insertion_point(field_add:server2N.UserConnection.killInfo)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConnection::killinfo() const {
  // @@protoc_insertion_point(field_list:server2N.UserConnection.killInfo)
  return killinfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConnection::mutable_killinfo() {
  // @@protoc_insertion_point(field_mutable_list:server2N.UserConnection.killInfo)
  return &killinfo_;
}

// repeated int32 deathInfo = 3;
inline int UserConnection::deathinfo_size() const {
  return deathinfo_.size();
}
inline void UserConnection::clear_deathinfo() {
  deathinfo_.Clear();
}
inline ::google::protobuf::int32 UserConnection::deathinfo(int index) const {
  // @@protoc_insertion_point(field_get:server2N.UserConnection.deathInfo)
  return deathinfo_.Get(index);
}
inline void UserConnection::set_deathinfo(int index, ::google::protobuf::int32 value) {
  deathinfo_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2N.UserConnection.deathInfo)
}
inline void UserConnection::add_deathinfo(::google::protobuf::int32 value) {
  deathinfo_.Add(value);
  // @@protoc_insertion_point(field_add:server2N.UserConnection.deathInfo)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConnection::deathinfo() const {
  // @@protoc_insertion_point(field_list:server2N.UserConnection.deathInfo)
  return deathinfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConnection::mutable_deathinfo() {
  // @@protoc_insertion_point(field_mutable_list:server2N.UserConnection.deathInfo)
  return &deathinfo_;
}

// repeated string nickname = 4;
inline int UserConnection::nickname_size() const {
  return nickname_.size();
}
inline void UserConnection::clear_nickname() {
  nickname_.Clear();
}
inline const ::std::string& UserConnection::nickname(int index) const {
  // @@protoc_insertion_point(field_get:server2N.UserConnection.nickname)
  return nickname_.Get(index);
}
inline ::std::string* UserConnection::mutable_nickname(int index) {
  // @@protoc_insertion_point(field_mutable:server2N.UserConnection.nickname)
  return nickname_.Mutable(index);
}
inline void UserConnection::set_nickname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server2N.UserConnection.nickname)
  nickname_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UserConnection::set_nickname(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:server2N.UserConnection.nickname)
  nickname_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UserConnection::set_nickname(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server2N.UserConnection.nickname)
}
inline void UserConnection::set_nickname(int index, const char* value, size_t size) {
  nickname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server2N.UserConnection.nickname)
}
inline ::std::string* UserConnection::add_nickname() {
  // @@protoc_insertion_point(field_add_mutable:server2N.UserConnection.nickname)
  return nickname_.Add();
}
inline void UserConnection::add_nickname(const ::std::string& value) {
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server2N.UserConnection.nickname)
}
#if LANG_CXX11
inline void UserConnection::add_nickname(::std::string&& value) {
  nickname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server2N.UserConnection.nickname)
}
#endif
inline void UserConnection::add_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server2N.UserConnection.nickname)
}
inline void UserConnection::add_nickname(const char* value, size_t size) {
  nickname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server2N.UserConnection.nickname)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserConnection::nickname() const {
  // @@protoc_insertion_point(field_list:server2N.UserConnection.nickname)
  return nickname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserConnection::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable_list:server2N.UserConnection.nickname)
  return &nickname_;
}

// repeated .server2N.InfoItem item = 5;
inline int UserConnection::item_size() const {
  return item_.size();
}
inline void UserConnection::clear_item() {
  item_.Clear();
}
inline ::server2N::InfoItem* UserConnection::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:server2N.UserConnection.item)
  return item_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::server2N::InfoItem >*
UserConnection::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:server2N.UserConnection.item)
  return &item_;
}
inline const ::server2N::InfoItem& UserConnection::item(int index) const {
  // @@protoc_insertion_point(field_get:server2N.UserConnection.item)
  return item_.Get(index);
}
inline ::server2N::InfoItem* UserConnection::add_item() {
  // @@protoc_insertion_point(field_add:server2N.UserConnection.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::server2N::InfoItem >&
UserConnection::item() const {
  // @@protoc_insertion_point(field_list:server2N.UserConnection.item)
  return item_;
}

// .server2N.UserConnection.ConnectionType conType = 6;
inline void UserConnection::clear_contype() {
  contype_ = 0;
}
inline ::server2N::UserConnection_ConnectionType UserConnection::contype() const {
  // @@protoc_insertion_point(field_get:server2N.UserConnection.conType)
  return static_cast< ::server2N::UserConnection_ConnectionType >(contype_);
}
inline void UserConnection::set_contype(::server2N::UserConnection_ConnectionType value) {
  
  contype_ = value;
  // @@protoc_insertion_point(field_set:server2N.UserConnection.conType)
}

// -------------------------------------------------------------------

// EventMove

// .server2N.EventMove.Direction type = 5;
inline void EventMove::clear_type() {
  type_ = 0;
}
inline ::server2N::EventMove_Direction EventMove::type() const {
  // @@protoc_insertion_point(field_get:server2N.EventMove.type)
  return static_cast< ::server2N::EventMove_Direction >(type_);
}
inline void EventMove::set_type(::server2N::EventMove_Direction value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventMove.type)
}

// -------------------------------------------------------------------

// EventStop

// -------------------------------------------------------------------

// EventJump

// -------------------------------------------------------------------

// EventShoot

// int32 shootType = 1;
inline void EventShoot::clear_shoottype() {
  shoottype_ = 0;
}
inline ::google::protobuf::int32 EventShoot::shoottype() const {
  // @@protoc_insertion_point(field_get:server2N.EventShoot.shootType)
  return shoottype_;
}
inline void EventShoot::set_shoottype(::google::protobuf::int32 value) {
  
  shoottype_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventShoot.shootType)
}

// float bulletSpeed = 2;
inline void EventShoot::clear_bulletspeed() {
  bulletspeed_ = 0;
}
inline float EventShoot::bulletspeed() const {
  // @@protoc_insertion_point(field_get:server2N.EventShoot.bulletSpeed)
  return bulletspeed_;
}
inline void EventShoot::set_bulletspeed(float value) {
  
  bulletspeed_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventShoot.bulletSpeed)
}

// float bulletRange = 3;
inline void EventShoot::clear_bulletrange() {
  bulletrange_ = 0;
}
inline float EventShoot::bulletrange() const {
  // @@protoc_insertion_point(field_get:server2N.EventShoot.bulletRange)
  return bulletrange_;
}
inline void EventShoot::set_bulletrange(float value) {
  
  bulletrange_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventShoot.bulletRange)
}

// float shootAngle = 4;
inline void EventShoot::clear_shootangle() {
  shootangle_ = 0;
}
inline float EventShoot::shootangle() const {
  // @@protoc_insertion_point(field_get:server2N.EventShoot.shootAngle)
  return shootangle_;
}
inline void EventShoot::set_shootangle(float value) {
  
  shootangle_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventShoot.shootAngle)
}

// float damage = 5;
inline void EventShoot::clear_damage() {
  damage_ = 0;
}
inline float EventShoot::damage() const {
  // @@protoc_insertion_point(field_get:server2N.EventShoot.damage)
  return damage_;
}
inline void EventShoot::set_damage(float value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventShoot.damage)
}

// float impactScale = 6;
inline void EventShoot::clear_impactscale() {
  impactscale_ = 0;
}
inline float EventShoot::impactscale() const {
  // @@protoc_insertion_point(field_get:server2N.EventShoot.impactScale)
  return impactscale_;
}
inline void EventShoot::set_impactscale(float value) {
  
  impactscale_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventShoot.impactScale)
}

// -------------------------------------------------------------------

// EventHit

// int32 hitType = 1;
inline void EventHit::clear_hittype() {
  hittype_ = 0;
}
inline ::google::protobuf::int32 EventHit::hittype() const {
  // @@protoc_insertion_point(field_get:server2N.EventHit.hitType)
  return hittype_;
}
inline void EventHit::set_hittype(::google::protobuf::int32 value) {
  
  hittype_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventHit.hitType)
}

// float damage = 2;
inline void EventHit::clear_damage() {
  damage_ = 0;
}
inline float EventHit::damage() const {
  // @@protoc_insertion_point(field_get:server2N.EventHit.damage)
  return damage_;
}
inline void EventHit::set_damage(float value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventHit.damage)
}

// float impactX = 3;
inline void EventHit::clear_impactx() {
  impactx_ = 0;
}
inline float EventHit::impactx() const {
  // @@protoc_insertion_point(field_get:server2N.EventHit.impactX)
  return impactx_;
}
inline void EventHit::set_impactx(float value) {
  
  impactx_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventHit.impactX)
}

// float impactY = 4;
inline void EventHit::clear_impacty() {
  impacty_ = 0;
}
inline float EventHit::impacty() const {
  // @@protoc_insertion_point(field_get:server2N.EventHit.impactY)
  return impacty_;
}
inline void EventHit::set_impacty(float value) {
  
  impacty_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventHit.impactY)
}

// float currentHP = 5;
inline void EventHit::clear_currenthp() {
  currenthp_ = 0;
}
inline float EventHit::currenthp() const {
  // @@protoc_insertion_point(field_get:server2N.EventHit.currentHP)
  return currenthp_;
}
inline void EventHit::set_currenthp(float value) {
  
  currenthp_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventHit.currentHP)
}

// int32 attacker = 6;
inline void EventHit::clear_attacker() {
  attacker_ = 0;
}
inline ::google::protobuf::int32 EventHit::attacker() const {
  // @@protoc_insertion_point(field_get:server2N.EventHit.attacker)
  return attacker_;
}
inline void EventHit::set_attacker(::google::protobuf::int32 value) {
  
  attacker_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventHit.attacker)
}

// -------------------------------------------------------------------

// EventChangeWeapon

// int32 weaponId = 1;
inline void EventChangeWeapon::clear_weaponid() {
  weaponid_ = 0;
}
inline ::google::protobuf::int32 EventChangeWeapon::weaponid() const {
  // @@protoc_insertion_point(field_get:server2N.EventChangeWeapon.weaponId)
  return weaponid_;
}
inline void EventChangeWeapon::set_weaponid(::google::protobuf::int32 value) {
  
  weaponid_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventChangeWeapon.weaponId)
}

// -------------------------------------------------------------------

// EventSpawn

// -------------------------------------------------------------------

// EventUserSync

// float currentHP = 1;
inline void EventUserSync::clear_currenthp() {
  currenthp_ = 0;
}
inline float EventUserSync::currenthp() const {
  // @@protoc_insertion_point(field_get:server2N.EventUserSync.currentHP)
  return currenthp_;
}
inline void EventUserSync::set_currenthp(float value) {
  
  currenthp_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventUserSync.currentHP)
}

// int32 weaponId = 2;
inline void EventUserSync::clear_weaponid() {
  weaponid_ = 0;
}
inline ::google::protobuf::int32 EventUserSync::weaponid() const {
  // @@protoc_insertion_point(field_get:server2N.EventUserSync.weaponId)
  return weaponid_;
}
inline void EventUserSync::set_weaponid(::google::protobuf::int32 value) {
  
  weaponid_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventUserSync.weaponId)
}

// -------------------------------------------------------------------

// EventDeath

// int32 triggerId = 1;
inline void EventDeath::clear_triggerid() {
  triggerid_ = 0;
}
inline ::google::protobuf::int32 EventDeath::triggerid() const {
  // @@protoc_insertion_point(field_get:server2N.EventDeath.triggerId)
  return triggerid_;
}
inline void EventDeath::set_triggerid(::google::protobuf::int32 value) {
  
  triggerid_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventDeath.triggerId)
}

// -------------------------------------------------------------------

// EventItemSpawn

// .server2N.InfoItem item = 1;
inline bool EventItemSpawn::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void EventItemSpawn::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::server2N::InfoItem& EventItemSpawn::item() const {
  const ::server2N::InfoItem* p = item_;
  // @@protoc_insertion_point(field_get:server2N.EventItemSpawn.item)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::InfoItem*>(
      &::server2N::_InfoItem_default_instance_);
}
inline ::server2N::InfoItem* EventItemSpawn::release_item() {
  // @@protoc_insertion_point(field_release:server2N.EventItemSpawn.item)
  
  ::server2N::InfoItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::server2N::InfoItem* EventItemSpawn::mutable_item() {
  
  if (item_ == NULL) {
    item_ = ::google::protobuf::Arena::Create< ::server2N::InfoItem >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.EventItemSpawn.item)
  return item_;
}
inline void EventItemSpawn::set_allocated_item(::server2N::InfoItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:server2N.EventItemSpawn.item)
}

// -------------------------------------------------------------------

// EventItemGet

// .server2N.InfoItem item = 1;
inline bool EventItemGet::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void EventItemGet::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::server2N::InfoItem& EventItemGet::item() const {
  const ::server2N::InfoItem* p = item_;
  // @@protoc_insertion_point(field_get:server2N.EventItemGet.item)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::InfoItem*>(
      &::server2N::_InfoItem_default_instance_);
}
inline ::server2N::InfoItem* EventItemGet::release_item() {
  // @@protoc_insertion_point(field_release:server2N.EventItemGet.item)
  
  ::server2N::InfoItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::server2N::InfoItem* EventItemGet::mutable_item() {
  
  if (item_ == NULL) {
    item_ = ::google::protobuf::Arena::Create< ::server2N::InfoItem >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.EventItemGet.item)
  return item_;
}
inline void EventItemGet::set_allocated_item(::server2N::InfoItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:server2N.EventItemGet.item)
}

// -------------------------------------------------------------------

// EventCam

// bool isCamOff = 1;
inline void EventCam::clear_iscamoff() {
  iscamoff_ = false;
}
inline bool EventCam::iscamoff() const {
  // @@protoc_insertion_point(field_get:server2N.EventCam.isCamOff)
  return iscamoff_;
}
inline void EventCam::set_iscamoff(bool value) {
  
  iscamoff_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventCam.isCamOff)
}

// int32 targetID = 2;
inline void EventCam::clear_targetid() {
  targetid_ = 0;
}
inline ::google::protobuf::int32 EventCam::targetid() const {
  // @@protoc_insertion_point(field_get:server2N.EventCam.targetID)
  return targetid_;
}
inline void EventCam::set_targetid(::google::protobuf::int32 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:server2N.EventCam.targetID)
}

// -------------------------------------------------------------------

// InfoItem

// int32 amount = 4;
inline void InfoItem::clear_amount() {
  amount_ = 0;
}
inline ::google::protobuf::int32 InfoItem::amount() const {
  // @@protoc_insertion_point(field_get:server2N.InfoItem.amount)
  return amount_;
}
inline void InfoItem::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:server2N.InfoItem.amount)
}

// string itemId = 2;
inline void InfoItem::clear_itemid() {
  itemid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoItem::itemid() const {
  // @@protoc_insertion_point(field_get:server2N.InfoItem.itemId)
  return itemid_.GetNoArena();
}
inline void InfoItem::set_itemid(const ::std::string& value) {
  
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server2N.InfoItem.itemId)
}
#if LANG_CXX11
inline void InfoItem::set_itemid(::std::string&& value) {
  
  itemid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server2N.InfoItem.itemId)
}
#endif
inline void InfoItem::set_itemid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server2N.InfoItem.itemId)
}
inline void InfoItem::set_itemid(const char* value, size_t size) {
  
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server2N.InfoItem.itemId)
}
inline ::std::string* InfoItem::mutable_itemid() {
  
  // @@protoc_insertion_point(field_mutable:server2N.InfoItem.itemId)
  return itemid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoItem::release_itemid() {
  // @@protoc_insertion_point(field_release:server2N.InfoItem.itemId)
  
  return itemid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoItem::set_allocated_itemid(::std::string* itemid) {
  if (itemid != NULL) {
    
  } else {
    
  }
  itemid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itemid);
  // @@protoc_insertion_point(field_set_allocated:server2N.InfoItem.itemId)
}

// .server2N.InfoItem.ItemType itemType = 5;
inline void InfoItem::clear_itemtype() {
  itemtype_ = 0;
}
inline ::server2N::InfoItem_ItemType InfoItem::itemtype() const {
  // @@protoc_insertion_point(field_get:server2N.InfoItem.itemType)
  return static_cast< ::server2N::InfoItem_ItemType >(itemtype_);
}
inline void InfoItem::set_itemtype(::server2N::InfoItem_ItemType value) {
  
  itemtype_ = value;
  // @@protoc_insertion_point(field_set:server2N.InfoItem.itemType)
}

// .server2N.InfoItem.WeaponId weaponId = 6;
inline void InfoItem::clear_weaponid() {
  weaponid_ = 0;
}
inline ::server2N::InfoItem_WeaponId InfoItem::weaponid() const {
  // @@protoc_insertion_point(field_get:server2N.InfoItem.weaponId)
  return static_cast< ::server2N::InfoItem_WeaponId >(weaponid_);
}
inline void InfoItem::set_weaponid(::server2N::InfoItem_WeaponId value) {
  
  weaponid_ = value;
  // @@protoc_insertion_point(field_set:server2N.InfoItem.weaponId)
}

// float ItemPositionX = 7;
inline void InfoItem::clear_itempositionx() {
  itempositionx_ = 0;
}
inline float InfoItem::itempositionx() const {
  // @@protoc_insertion_point(field_get:server2N.InfoItem.ItemPositionX)
  return itempositionx_;
}
inline void InfoItem::set_itempositionx(float value) {
  
  itempositionx_ = value;
  // @@protoc_insertion_point(field_set:server2N.InfoItem.ItemPositionX)
}

// float ItemPositionY = 8;
inline void InfoItem::clear_itempositiony() {
  itempositiony_ = 0;
}
inline float InfoItem::itempositiony() const {
  // @@protoc_insertion_point(field_get:server2N.InfoItem.ItemPositionY)
  return itempositiony_;
}
inline void InfoItem::set_itempositiony(float value) {
  
  itempositiony_ = value;
  // @@protoc_insertion_point(field_set:server2N.InfoItem.ItemPositionY)
}

// -------------------------------------------------------------------

// GameEvent

// .server2N.UserEvent userEvent = 3;
inline bool GameEvent::has_userevent() const {
  return this != internal_default_instance() && userevent_ != NULL;
}
inline void GameEvent::clear_userevent() {
  if (GetArenaNoVirtual() == NULL && userevent_ != NULL) {
    delete userevent_;
  }
  userevent_ = NULL;
}
inline const ::server2N::UserEvent& GameEvent::userevent() const {
  const ::server2N::UserEvent* p = userevent_;
  // @@protoc_insertion_point(field_get:server2N.GameEvent.userEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::UserEvent*>(
      &::server2N::_UserEvent_default_instance_);
}
inline ::server2N::UserEvent* GameEvent::release_userevent() {
  // @@protoc_insertion_point(field_release:server2N.GameEvent.userEvent)
  
  ::server2N::UserEvent* temp = userevent_;
  userevent_ = NULL;
  return temp;
}
inline ::server2N::UserEvent* GameEvent::mutable_userevent() {
  
  if (userevent_ == NULL) {
    userevent_ = ::google::protobuf::Arena::Create< ::server2N::UserEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.GameEvent.userEvent)
  return userevent_;
}
inline void GameEvent::set_allocated_userevent(::server2N::UserEvent* userevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete userevent_;
  }
  if (userevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      userevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, userevent, submessage_arena);
    }
    
  } else {
    
  }
  userevent_ = userevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.GameEvent.userEvent)
}

// .server2N.SystemEvent systemEvent = 4;
inline bool GameEvent::has_systemevent() const {
  return this != internal_default_instance() && systemevent_ != NULL;
}
inline void GameEvent::clear_systemevent() {
  if (GetArenaNoVirtual() == NULL && systemevent_ != NULL) {
    delete systemevent_;
  }
  systemevent_ = NULL;
}
inline const ::server2N::SystemEvent& GameEvent::systemevent() const {
  const ::server2N::SystemEvent* p = systemevent_;
  // @@protoc_insertion_point(field_get:server2N.GameEvent.systemEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::SystemEvent*>(
      &::server2N::_SystemEvent_default_instance_);
}
inline ::server2N::SystemEvent* GameEvent::release_systemevent() {
  // @@protoc_insertion_point(field_release:server2N.GameEvent.systemEvent)
  
  ::server2N::SystemEvent* temp = systemevent_;
  systemevent_ = NULL;
  return temp;
}
inline ::server2N::SystemEvent* GameEvent::mutable_systemevent() {
  
  if (systemevent_ == NULL) {
    systemevent_ = ::google::protobuf::Arena::Create< ::server2N::SystemEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.GameEvent.systemEvent)
  return systemevent_;
}
inline void GameEvent::set_allocated_systemevent(::server2N::SystemEvent* systemevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete systemevent_;
  }
  if (systemevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      systemevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, systemevent, submessage_arena);
    }
    
  } else {
    
  }
  systemevent_ = systemevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.GameEvent.systemEvent)
}

// float EventPositionX = 6;
inline void GameEvent::clear_eventpositionx() {
  eventpositionx_ = 0;
}
inline float GameEvent::eventpositionx() const {
  // @@protoc_insertion_point(field_get:server2N.GameEvent.EventPositionX)
  return eventpositionx_;
}
inline void GameEvent::set_eventpositionx(float value) {
  
  eventpositionx_ = value;
  // @@protoc_insertion_point(field_set:server2N.GameEvent.EventPositionX)
}

// float EventPositionY = 7;
inline void GameEvent::clear_eventpositiony() {
  eventpositiony_ = 0;
}
inline float GameEvent::eventpositiony() const {
  // @@protoc_insertion_point(field_get:server2N.GameEvent.EventPositionY)
  return eventpositiony_;
}
inline void GameEvent::set_eventpositiony(float value) {
  
  eventpositiony_ = value;
  // @@protoc_insertion_point(field_set:server2N.GameEvent.EventPositionY)
}

// float VelocityX = 8;
inline void GameEvent::clear_velocityx() {
  velocityx_ = 0;
}
inline float GameEvent::velocityx() const {
  // @@protoc_insertion_point(field_get:server2N.GameEvent.VelocityX)
  return velocityx_;
}
inline void GameEvent::set_velocityx(float value) {
  
  velocityx_ = value;
  // @@protoc_insertion_point(field_set:server2N.GameEvent.VelocityX)
}

// float VelocityY = 9;
inline void GameEvent::clear_velocityy() {
  velocityy_ = 0;
}
inline float GameEvent::velocityy() const {
  // @@protoc_insertion_point(field_get:server2N.GameEvent.VelocityY)
  return velocityy_;
}
inline void GameEvent::set_velocityy(float value) {
  
  velocityy_ = value;
  // @@protoc_insertion_point(field_set:server2N.GameEvent.VelocityY)
}

// repeated int32 invokerId = 10;
inline int GameEvent::invokerid_size() const {
  return invokerid_.size();
}
inline void GameEvent::clear_invokerid() {
  invokerid_.Clear();
}
inline ::google::protobuf::int32 GameEvent::invokerid(int index) const {
  // @@protoc_insertion_point(field_get:server2N.GameEvent.invokerId)
  return invokerid_.Get(index);
}
inline void GameEvent::set_invokerid(int index, ::google::protobuf::int32 value) {
  invokerid_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2N.GameEvent.invokerId)
}
inline void GameEvent::add_invokerid(::google::protobuf::int32 value) {
  invokerid_.Add(value);
  // @@protoc_insertion_point(field_add:server2N.GameEvent.invokerId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameEvent::invokerid() const {
  // @@protoc_insertion_point(field_list:server2N.GameEvent.invokerId)
  return invokerid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameEvent::mutable_invokerid() {
  // @@protoc_insertion_point(field_mutable_list:server2N.GameEvent.invokerId)
  return &invokerid_;
}

// bool isInterested = 11;
inline void GameEvent::clear_isinterested() {
  isinterested_ = false;
}
inline bool GameEvent::isinterested() const {
  // @@protoc_insertion_point(field_get:server2N.GameEvent.isInterested)
  return isinterested_;
}
inline void GameEvent::set_isinterested(bool value) {
  
  isinterested_ = value;
  // @@protoc_insertion_point(field_set:server2N.GameEvent.isInterested)
}

// bool isLocal = 12;
inline void GameEvent::clear_islocal() {
  islocal_ = false;
}
inline bool GameEvent::islocal() const {
  // @@protoc_insertion_point(field_get:server2N.GameEvent.isLocal)
  return islocal_;
}
inline void GameEvent::set_islocal(bool value) {
  
  islocal_ = value;
  // @@protoc_insertion_point(field_set:server2N.GameEvent.isLocal)
}

// .server2N.GameEvent.eventType evtType = 13;
inline void GameEvent::clear_evttype() {
  evttype_ = 0;
}
inline ::server2N::GameEvent_eventType GameEvent::evttype() const {
  // @@protoc_insertion_point(field_get:server2N.GameEvent.evtType)
  return static_cast< ::server2N::GameEvent_eventType >(evttype_);
}
inline void GameEvent::set_evttype(::server2N::GameEvent_eventType value) {
  
  evttype_ = value;
  // @@protoc_insertion_point(field_set:server2N.GameEvent.evtType)
}

// -------------------------------------------------------------------

// SystemEvent

// .server2N.SystemEvent.action actType = 202;
inline void SystemEvent::clear_acttype() {
  acttype_ = 0;
}
inline ::server2N::SystemEvent_action SystemEvent::acttype() const {
  // @@protoc_insertion_point(field_get:server2N.SystemEvent.actType)
  return static_cast< ::server2N::SystemEvent_action >(acttype_);
}
inline void SystemEvent::set_acttype(::server2N::SystemEvent_action value) {
  
  acttype_ = value;
  // @@protoc_insertion_point(field_set:server2N.SystemEvent.actType)
}

// .server2N.EventItemSpawn itemSpawnEvent = 203;
inline bool SystemEvent::has_itemspawnevent() const {
  return this != internal_default_instance() && itemspawnevent_ != NULL;
}
inline void SystemEvent::clear_itemspawnevent() {
  if (GetArenaNoVirtual() == NULL && itemspawnevent_ != NULL) {
    delete itemspawnevent_;
  }
  itemspawnevent_ = NULL;
}
inline const ::server2N::EventItemSpawn& SystemEvent::itemspawnevent() const {
  const ::server2N::EventItemSpawn* p = itemspawnevent_;
  // @@protoc_insertion_point(field_get:server2N.SystemEvent.itemSpawnEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventItemSpawn*>(
      &::server2N::_EventItemSpawn_default_instance_);
}
inline ::server2N::EventItemSpawn* SystemEvent::release_itemspawnevent() {
  // @@protoc_insertion_point(field_release:server2N.SystemEvent.itemSpawnEvent)
  
  ::server2N::EventItemSpawn* temp = itemspawnevent_;
  itemspawnevent_ = NULL;
  return temp;
}
inline ::server2N::EventItemSpawn* SystemEvent::mutable_itemspawnevent() {
  
  if (itemspawnevent_ == NULL) {
    itemspawnevent_ = ::google::protobuf::Arena::Create< ::server2N::EventItemSpawn >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.SystemEvent.itemSpawnEvent)
  return itemspawnevent_;
}
inline void SystemEvent::set_allocated_itemspawnevent(::server2N::EventItemSpawn* itemspawnevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete itemspawnevent_;
  }
  if (itemspawnevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      itemspawnevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, itemspawnevent, submessage_arena);
    }
    
  } else {
    
  }
  itemspawnevent_ = itemspawnevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.SystemEvent.itemSpawnEvent)
}

// .server2N.EventItemGet itemGetEvent = 204;
inline bool SystemEvent::has_itemgetevent() const {
  return this != internal_default_instance() && itemgetevent_ != NULL;
}
inline void SystemEvent::clear_itemgetevent() {
  if (GetArenaNoVirtual() == NULL && itemgetevent_ != NULL) {
    delete itemgetevent_;
  }
  itemgetevent_ = NULL;
}
inline const ::server2N::EventItemGet& SystemEvent::itemgetevent() const {
  const ::server2N::EventItemGet* p = itemgetevent_;
  // @@protoc_insertion_point(field_get:server2N.SystemEvent.itemGetEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventItemGet*>(
      &::server2N::_EventItemGet_default_instance_);
}
inline ::server2N::EventItemGet* SystemEvent::release_itemgetevent() {
  // @@protoc_insertion_point(field_release:server2N.SystemEvent.itemGetEvent)
  
  ::server2N::EventItemGet* temp = itemgetevent_;
  itemgetevent_ = NULL;
  return temp;
}
inline ::server2N::EventItemGet* SystemEvent::mutable_itemgetevent() {
  
  if (itemgetevent_ == NULL) {
    itemgetevent_ = ::google::protobuf::Arena::Create< ::server2N::EventItemGet >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.SystemEvent.itemGetEvent)
  return itemgetevent_;
}
inline void SystemEvent::set_allocated_itemgetevent(::server2N::EventItemGet* itemgetevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete itemgetevent_;
  }
  if (itemgetevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      itemgetevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, itemgetevent, submessage_arena);
    }
    
  } else {
    
  }
  itemgetevent_ = itemgetevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.SystemEvent.itemGetEvent)
}

// -------------------------------------------------------------------

// UserEvent

// .server2N.UserEvent.action actType = 110;
inline void UserEvent::clear_acttype() {
  acttype_ = 0;
}
inline ::server2N::UserEvent_action UserEvent::acttype() const {
  // @@protoc_insertion_point(field_get:server2N.UserEvent.actType)
  return static_cast< ::server2N::UserEvent_action >(acttype_);
}
inline void UserEvent::set_acttype(::server2N::UserEvent_action value) {
  
  acttype_ = value;
  // @@protoc_insertion_point(field_set:server2N.UserEvent.actType)
}

// .server2N.EventMove moveEvent = 111;
inline bool UserEvent::has_moveevent() const {
  return this != internal_default_instance() && moveevent_ != NULL;
}
inline void UserEvent::clear_moveevent() {
  if (GetArenaNoVirtual() == NULL && moveevent_ != NULL) {
    delete moveevent_;
  }
  moveevent_ = NULL;
}
inline const ::server2N::EventMove& UserEvent::moveevent() const {
  const ::server2N::EventMove* p = moveevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.moveEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventMove*>(
      &::server2N::_EventMove_default_instance_);
}
inline ::server2N::EventMove* UserEvent::release_moveevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.moveEvent)
  
  ::server2N::EventMove* temp = moveevent_;
  moveevent_ = NULL;
  return temp;
}
inline ::server2N::EventMove* UserEvent::mutable_moveevent() {
  
  if (moveevent_ == NULL) {
    moveevent_ = ::google::protobuf::Arena::Create< ::server2N::EventMove >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.moveEvent)
  return moveevent_;
}
inline void UserEvent::set_allocated_moveevent(::server2N::EventMove* moveevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete moveevent_;
  }
  if (moveevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      moveevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, moveevent, submessage_arena);
    }
    
  } else {
    
  }
  moveevent_ = moveevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.moveEvent)
}

// .server2N.EventStop stopEvent = 112;
inline bool UserEvent::has_stopevent() const {
  return this != internal_default_instance() && stopevent_ != NULL;
}
inline void UserEvent::clear_stopevent() {
  if (GetArenaNoVirtual() == NULL && stopevent_ != NULL) {
    delete stopevent_;
  }
  stopevent_ = NULL;
}
inline const ::server2N::EventStop& UserEvent::stopevent() const {
  const ::server2N::EventStop* p = stopevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.stopEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventStop*>(
      &::server2N::_EventStop_default_instance_);
}
inline ::server2N::EventStop* UserEvent::release_stopevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.stopEvent)
  
  ::server2N::EventStop* temp = stopevent_;
  stopevent_ = NULL;
  return temp;
}
inline ::server2N::EventStop* UserEvent::mutable_stopevent() {
  
  if (stopevent_ == NULL) {
    stopevent_ = ::google::protobuf::Arena::Create< ::server2N::EventStop >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.stopEvent)
  return stopevent_;
}
inline void UserEvent::set_allocated_stopevent(::server2N::EventStop* stopevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stopevent_;
  }
  if (stopevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stopevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stopevent, submessage_arena);
    }
    
  } else {
    
  }
  stopevent_ = stopevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.stopEvent)
}

// .server2N.EventJump jumpEvent = 113;
inline bool UserEvent::has_jumpevent() const {
  return this != internal_default_instance() && jumpevent_ != NULL;
}
inline void UserEvent::clear_jumpevent() {
  if (GetArenaNoVirtual() == NULL && jumpevent_ != NULL) {
    delete jumpevent_;
  }
  jumpevent_ = NULL;
}
inline const ::server2N::EventJump& UserEvent::jumpevent() const {
  const ::server2N::EventJump* p = jumpevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.jumpEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventJump*>(
      &::server2N::_EventJump_default_instance_);
}
inline ::server2N::EventJump* UserEvent::release_jumpevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.jumpEvent)
  
  ::server2N::EventJump* temp = jumpevent_;
  jumpevent_ = NULL;
  return temp;
}
inline ::server2N::EventJump* UserEvent::mutable_jumpevent() {
  
  if (jumpevent_ == NULL) {
    jumpevent_ = ::google::protobuf::Arena::Create< ::server2N::EventJump >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.jumpEvent)
  return jumpevent_;
}
inline void UserEvent::set_allocated_jumpevent(::server2N::EventJump* jumpevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete jumpevent_;
  }
  if (jumpevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      jumpevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, jumpevent, submessage_arena);
    }
    
  } else {
    
  }
  jumpevent_ = jumpevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.jumpEvent)
}

// .server2N.EventShoot shootEvent = 114;
inline bool UserEvent::has_shootevent() const {
  return this != internal_default_instance() && shootevent_ != NULL;
}
inline void UserEvent::clear_shootevent() {
  if (GetArenaNoVirtual() == NULL && shootevent_ != NULL) {
    delete shootevent_;
  }
  shootevent_ = NULL;
}
inline const ::server2N::EventShoot& UserEvent::shootevent() const {
  const ::server2N::EventShoot* p = shootevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.shootEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventShoot*>(
      &::server2N::_EventShoot_default_instance_);
}
inline ::server2N::EventShoot* UserEvent::release_shootevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.shootEvent)
  
  ::server2N::EventShoot* temp = shootevent_;
  shootevent_ = NULL;
  return temp;
}
inline ::server2N::EventShoot* UserEvent::mutable_shootevent() {
  
  if (shootevent_ == NULL) {
    shootevent_ = ::google::protobuf::Arena::Create< ::server2N::EventShoot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.shootEvent)
  return shootevent_;
}
inline void UserEvent::set_allocated_shootevent(::server2N::EventShoot* shootevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shootevent_;
  }
  if (shootevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shootevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shootevent, submessage_arena);
    }
    
  } else {
    
  }
  shootevent_ = shootevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.shootEvent)
}

// .server2N.EventHit hitEvent = 115;
inline bool UserEvent::has_hitevent() const {
  return this != internal_default_instance() && hitevent_ != NULL;
}
inline void UserEvent::clear_hitevent() {
  if (GetArenaNoVirtual() == NULL && hitevent_ != NULL) {
    delete hitevent_;
  }
  hitevent_ = NULL;
}
inline const ::server2N::EventHit& UserEvent::hitevent() const {
  const ::server2N::EventHit* p = hitevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.hitEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventHit*>(
      &::server2N::_EventHit_default_instance_);
}
inline ::server2N::EventHit* UserEvent::release_hitevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.hitEvent)
  
  ::server2N::EventHit* temp = hitevent_;
  hitevent_ = NULL;
  return temp;
}
inline ::server2N::EventHit* UserEvent::mutable_hitevent() {
  
  if (hitevent_ == NULL) {
    hitevent_ = ::google::protobuf::Arena::Create< ::server2N::EventHit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.hitEvent)
  return hitevent_;
}
inline void UserEvent::set_allocated_hitevent(::server2N::EventHit* hitevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hitevent_;
  }
  if (hitevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hitevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hitevent, submessage_arena);
    }
    
  } else {
    
  }
  hitevent_ = hitevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.hitEvent)
}

// .server2N.EventSpawn spawnEvent = 116;
inline bool UserEvent::has_spawnevent() const {
  return this != internal_default_instance() && spawnevent_ != NULL;
}
inline void UserEvent::clear_spawnevent() {
  if (GetArenaNoVirtual() == NULL && spawnevent_ != NULL) {
    delete spawnevent_;
  }
  spawnevent_ = NULL;
}
inline const ::server2N::EventSpawn& UserEvent::spawnevent() const {
  const ::server2N::EventSpawn* p = spawnevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.spawnEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventSpawn*>(
      &::server2N::_EventSpawn_default_instance_);
}
inline ::server2N::EventSpawn* UserEvent::release_spawnevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.spawnEvent)
  
  ::server2N::EventSpawn* temp = spawnevent_;
  spawnevent_ = NULL;
  return temp;
}
inline ::server2N::EventSpawn* UserEvent::mutable_spawnevent() {
  
  if (spawnevent_ == NULL) {
    spawnevent_ = ::google::protobuf::Arena::Create< ::server2N::EventSpawn >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.spawnEvent)
  return spawnevent_;
}
inline void UserEvent::set_allocated_spawnevent(::server2N::EventSpawn* spawnevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spawnevent_;
  }
  if (spawnevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spawnevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spawnevent, submessage_arena);
    }
    
  } else {
    
  }
  spawnevent_ = spawnevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.spawnEvent)
}

// .server2N.EventUserSync syncEvent = 117;
inline bool UserEvent::has_syncevent() const {
  return this != internal_default_instance() && syncevent_ != NULL;
}
inline void UserEvent::clear_syncevent() {
  if (GetArenaNoVirtual() == NULL && syncevent_ != NULL) {
    delete syncevent_;
  }
  syncevent_ = NULL;
}
inline const ::server2N::EventUserSync& UserEvent::syncevent() const {
  const ::server2N::EventUserSync* p = syncevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.syncEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventUserSync*>(
      &::server2N::_EventUserSync_default_instance_);
}
inline ::server2N::EventUserSync* UserEvent::release_syncevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.syncEvent)
  
  ::server2N::EventUserSync* temp = syncevent_;
  syncevent_ = NULL;
  return temp;
}
inline ::server2N::EventUserSync* UserEvent::mutable_syncevent() {
  
  if (syncevent_ == NULL) {
    syncevent_ = ::google::protobuf::Arena::Create< ::server2N::EventUserSync >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.syncEvent)
  return syncevent_;
}
inline void UserEvent::set_allocated_syncevent(::server2N::EventUserSync* syncevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete syncevent_;
  }
  if (syncevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      syncevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, syncevent, submessage_arena);
    }
    
  } else {
    
  }
  syncevent_ = syncevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.syncEvent)
}

// .server2N.EventDeath deathEvent = 118;
inline bool UserEvent::has_deathevent() const {
  return this != internal_default_instance() && deathevent_ != NULL;
}
inline void UserEvent::clear_deathevent() {
  if (GetArenaNoVirtual() == NULL && deathevent_ != NULL) {
    delete deathevent_;
  }
  deathevent_ = NULL;
}
inline const ::server2N::EventDeath& UserEvent::deathevent() const {
  const ::server2N::EventDeath* p = deathevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.deathEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventDeath*>(
      &::server2N::_EventDeath_default_instance_);
}
inline ::server2N::EventDeath* UserEvent::release_deathevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.deathEvent)
  
  ::server2N::EventDeath* temp = deathevent_;
  deathevent_ = NULL;
  return temp;
}
inline ::server2N::EventDeath* UserEvent::mutable_deathevent() {
  
  if (deathevent_ == NULL) {
    deathevent_ = ::google::protobuf::Arena::Create< ::server2N::EventDeath >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.deathEvent)
  return deathevent_;
}
inline void UserEvent::set_allocated_deathevent(::server2N::EventDeath* deathevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deathevent_;
  }
  if (deathevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deathevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deathevent, submessage_arena);
    }
    
  } else {
    
  }
  deathevent_ = deathevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.deathEvent)
}

// .server2N.EventChangeWeapon chWeaponEvent = 119;
inline bool UserEvent::has_chweaponevent() const {
  return this != internal_default_instance() && chweaponevent_ != NULL;
}
inline void UserEvent::clear_chweaponevent() {
  if (GetArenaNoVirtual() == NULL && chweaponevent_ != NULL) {
    delete chweaponevent_;
  }
  chweaponevent_ = NULL;
}
inline const ::server2N::EventChangeWeapon& UserEvent::chweaponevent() const {
  const ::server2N::EventChangeWeapon* p = chweaponevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.chWeaponEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventChangeWeapon*>(
      &::server2N::_EventChangeWeapon_default_instance_);
}
inline ::server2N::EventChangeWeapon* UserEvent::release_chweaponevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.chWeaponEvent)
  
  ::server2N::EventChangeWeapon* temp = chweaponevent_;
  chweaponevent_ = NULL;
  return temp;
}
inline ::server2N::EventChangeWeapon* UserEvent::mutable_chweaponevent() {
  
  if (chweaponevent_ == NULL) {
    chweaponevent_ = ::google::protobuf::Arena::Create< ::server2N::EventChangeWeapon >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.chWeaponEvent)
  return chweaponevent_;
}
inline void UserEvent::set_allocated_chweaponevent(::server2N::EventChangeWeapon* chweaponevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chweaponevent_;
  }
  if (chweaponevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chweaponevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chweaponevent, submessage_arena);
    }
    
  } else {
    
  }
  chweaponevent_ = chweaponevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.chWeaponEvent)
}

// .server2N.EventItemSpawn itemSpawnEvent = 120;
inline bool UserEvent::has_itemspawnevent() const {
  return this != internal_default_instance() && itemspawnevent_ != NULL;
}
inline void UserEvent::clear_itemspawnevent() {
  if (GetArenaNoVirtual() == NULL && itemspawnevent_ != NULL) {
    delete itemspawnevent_;
  }
  itemspawnevent_ = NULL;
}
inline const ::server2N::EventItemSpawn& UserEvent::itemspawnevent() const {
  const ::server2N::EventItemSpawn* p = itemspawnevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.itemSpawnEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventItemSpawn*>(
      &::server2N::_EventItemSpawn_default_instance_);
}
inline ::server2N::EventItemSpawn* UserEvent::release_itemspawnevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.itemSpawnEvent)
  
  ::server2N::EventItemSpawn* temp = itemspawnevent_;
  itemspawnevent_ = NULL;
  return temp;
}
inline ::server2N::EventItemSpawn* UserEvent::mutable_itemspawnevent() {
  
  if (itemspawnevent_ == NULL) {
    itemspawnevent_ = ::google::protobuf::Arena::Create< ::server2N::EventItemSpawn >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.itemSpawnEvent)
  return itemspawnevent_;
}
inline void UserEvent::set_allocated_itemspawnevent(::server2N::EventItemSpawn* itemspawnevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete itemspawnevent_;
  }
  if (itemspawnevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      itemspawnevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, itemspawnevent, submessage_arena);
    }
    
  } else {
    
  }
  itemspawnevent_ = itemspawnevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.itemSpawnEvent)
}

// .server2N.EventItemGet itemGetEvent = 121;
inline bool UserEvent::has_itemgetevent() const {
  return this != internal_default_instance() && itemgetevent_ != NULL;
}
inline void UserEvent::clear_itemgetevent() {
  if (GetArenaNoVirtual() == NULL && itemgetevent_ != NULL) {
    delete itemgetevent_;
  }
  itemgetevent_ = NULL;
}
inline const ::server2N::EventItemGet& UserEvent::itemgetevent() const {
  const ::server2N::EventItemGet* p = itemgetevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.itemGetEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventItemGet*>(
      &::server2N::_EventItemGet_default_instance_);
}
inline ::server2N::EventItemGet* UserEvent::release_itemgetevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.itemGetEvent)
  
  ::server2N::EventItemGet* temp = itemgetevent_;
  itemgetevent_ = NULL;
  return temp;
}
inline ::server2N::EventItemGet* UserEvent::mutable_itemgetevent() {
  
  if (itemgetevent_ == NULL) {
    itemgetevent_ = ::google::protobuf::Arena::Create< ::server2N::EventItemGet >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.itemGetEvent)
  return itemgetevent_;
}
inline void UserEvent::set_allocated_itemgetevent(::server2N::EventItemGet* itemgetevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete itemgetevent_;
  }
  if (itemgetevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      itemgetevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, itemgetevent, submessage_arena);
    }
    
  } else {
    
  }
  itemgetevent_ = itemgetevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.itemGetEvent)
}

// .server2N.EventCam camEvent = 123;
inline bool UserEvent::has_camevent() const {
  return this != internal_default_instance() && camevent_ != NULL;
}
inline void UserEvent::clear_camevent() {
  if (GetArenaNoVirtual() == NULL && camevent_ != NULL) {
    delete camevent_;
  }
  camevent_ = NULL;
}
inline const ::server2N::EventCam& UserEvent::camevent() const {
  const ::server2N::EventCam* p = camevent_;
  // @@protoc_insertion_point(field_get:server2N.UserEvent.camEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::EventCam*>(
      &::server2N::_EventCam_default_instance_);
}
inline ::server2N::EventCam* UserEvent::release_camevent() {
  // @@protoc_insertion_point(field_release:server2N.UserEvent.camEvent)
  
  ::server2N::EventCam* temp = camevent_;
  camevent_ = NULL;
  return temp;
}
inline ::server2N::EventCam* UserEvent::mutable_camevent() {
  
  if (camevent_ == NULL) {
    camevent_ = ::google::protobuf::Arena::Create< ::server2N::EventCam >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.UserEvent.camEvent)
  return camevent_;
}
inline void UserEvent::set_allocated_camevent(::server2N::EventCam* camevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete camevent_;
  }
  if (camevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camevent, submessage_arena);
    }
    
  } else {
    
  }
  camevent_ = camevent;
  // @@protoc_insertion_point(field_set_allocated:server2N.UserEvent.camEvent)
}

// -------------------------------------------------------------------

// PacketBody

// .server2N.PacketBody.messageType msgType = 10000;
inline void PacketBody::clear_msgtype() {
  msgtype_ = 0;
}
inline ::server2N::PacketBody_messageType PacketBody::msgtype() const {
  // @@protoc_insertion_point(field_get:server2N.PacketBody.msgType)
  return static_cast< ::server2N::PacketBody_messageType >(msgtype_);
}
inline void PacketBody::set_msgtype(::server2N::PacketBody_messageType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:server2N.PacketBody.msgType)
}

// .server2N.UserConnection connect = 6;
inline bool PacketBody::has_connect() const {
  return this != internal_default_instance() && connect_ != NULL;
}
inline void PacketBody::clear_connect() {
  if (GetArenaNoVirtual() == NULL && connect_ != NULL) {
    delete connect_;
  }
  connect_ = NULL;
}
inline const ::server2N::UserConnection& PacketBody::connect() const {
  const ::server2N::UserConnection* p = connect_;
  // @@protoc_insertion_point(field_get:server2N.PacketBody.connect)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::UserConnection*>(
      &::server2N::_UserConnection_default_instance_);
}
inline ::server2N::UserConnection* PacketBody::release_connect() {
  // @@protoc_insertion_point(field_release:server2N.PacketBody.connect)
  
  ::server2N::UserConnection* temp = connect_;
  connect_ = NULL;
  return temp;
}
inline ::server2N::UserConnection* PacketBody::mutable_connect() {
  
  if (connect_ == NULL) {
    connect_ = ::google::protobuf::Arena::Create< ::server2N::UserConnection >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.PacketBody.connect)
  return connect_;
}
inline void PacketBody::set_allocated_connect(::server2N::UserConnection* connect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connect_;
  }
  if (connect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    
  } else {
    
  }
  connect_ = connect;
  // @@protoc_insertion_point(field_set_allocated:server2N.PacketBody.connect)
}

// .server2N.GlobalNotice notice = 10001;
inline bool PacketBody::has_notice() const {
  return this != internal_default_instance() && notice_ != NULL;
}
inline void PacketBody::clear_notice() {
  if (GetArenaNoVirtual() == NULL && notice_ != NULL) {
    delete notice_;
  }
  notice_ = NULL;
}
inline const ::server2N::GlobalNotice& PacketBody::notice() const {
  const ::server2N::GlobalNotice* p = notice_;
  // @@protoc_insertion_point(field_get:server2N.PacketBody.notice)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::GlobalNotice*>(
      &::server2N::_GlobalNotice_default_instance_);
}
inline ::server2N::GlobalNotice* PacketBody::release_notice() {
  // @@protoc_insertion_point(field_release:server2N.PacketBody.notice)
  
  ::server2N::GlobalNotice* temp = notice_;
  notice_ = NULL;
  return temp;
}
inline ::server2N::GlobalNotice* PacketBody::mutable_notice() {
  
  if (notice_ == NULL) {
    notice_ = ::google::protobuf::Arena::Create< ::server2N::GlobalNotice >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.PacketBody.notice)
  return notice_;
}
inline void PacketBody::set_allocated_notice(::server2N::GlobalNotice* notice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete notice_;
  }
  if (notice) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      notice = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notice, submessage_arena);
    }
    
  } else {
    
  }
  notice_ = notice;
  // @@protoc_insertion_point(field_set_allocated:server2N.PacketBody.notice)
}

// .server2N.GameEvent event = 7;
inline bool PacketBody::has_event() const {
  return this != internal_default_instance() && event_ != NULL;
}
inline void PacketBody::clear_event() {
  if (GetArenaNoVirtual() == NULL && event_ != NULL) {
    delete event_;
  }
  event_ = NULL;
}
inline const ::server2N::GameEvent& PacketBody::event() const {
  const ::server2N::GameEvent* p = event_;
  // @@protoc_insertion_point(field_get:server2N.PacketBody.event)
  return p != NULL ? *p : *reinterpret_cast<const ::server2N::GameEvent*>(
      &::server2N::_GameEvent_default_instance_);
}
inline ::server2N::GameEvent* PacketBody::release_event() {
  // @@protoc_insertion_point(field_release:server2N.PacketBody.event)
  
  ::server2N::GameEvent* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::server2N::GameEvent* PacketBody::mutable_event() {
  
  if (event_ == NULL) {
    event_ = ::google::protobuf::Arena::Create< ::server2N::GameEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:server2N.PacketBody.event)
  return event_;
}
inline void PacketBody::set_allocated_event(::server2N::GameEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete event_;
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:server2N.PacketBody.event)
}

// int32 senderId = 8;
inline void PacketBody::clear_senderid() {
  senderid_ = 0;
}
inline ::google::protobuf::int32 PacketBody::senderid() const {
  // @@protoc_insertion_point(field_get:server2N.PacketBody.senderId)
  return senderid_;
}
inline void PacketBody::set_senderid(::google::protobuf::int32 value) {
  
  senderid_ = value;
  // @@protoc_insertion_point(field_set:server2N.PacketBody.senderId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server2N

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::server2N::GlobalNotice_NoticeInfo> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server2N::GlobalNotice_NoticeInfo>() {
  return ::server2N::GlobalNotice_NoticeInfo_descriptor();
}
template <> struct is_proto_enum< ::server2N::UserConnection_ConnectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server2N::UserConnection_ConnectionType>() {
  return ::server2N::UserConnection_ConnectionType_descriptor();
}
template <> struct is_proto_enum< ::server2N::EventMove_Direction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server2N::EventMove_Direction>() {
  return ::server2N::EventMove_Direction_descriptor();
}
template <> struct is_proto_enum< ::server2N::InfoItem_ItemType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server2N::InfoItem_ItemType>() {
  return ::server2N::InfoItem_ItemType_descriptor();
}
template <> struct is_proto_enum< ::server2N::InfoItem_WeaponId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server2N::InfoItem_WeaponId>() {
  return ::server2N::InfoItem_WeaponId_descriptor();
}
template <> struct is_proto_enum< ::server2N::GameEvent_eventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server2N::GameEvent_eventType>() {
  return ::server2N::GameEvent_eventType_descriptor();
}
template <> struct is_proto_enum< ::server2N::SystemEvent_action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server2N::SystemEvent_action>() {
  return ::server2N::SystemEvent_action_descriptor();
}
template <> struct is_proto_enum< ::server2N::UserEvent_action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server2N::UserEvent_action>() {
  return ::server2N::UserEvent_action_descriptor();
}
template <> struct is_proto_enum< ::server2N::PacketBody_messageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server2N::PacketBody_messageType>() {
  return ::server2N::PacketBody_messageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gameContent_2eproto__INCLUDED
