// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameContent.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Server2N {

  /// <summary>Holder for reflection information generated from gameContent.proto</summary>
  public static partial class GameContentReflection {

    #region Descriptor
    /// <summary>File descriptor for gameContent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameContentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFnYW1lQ29udGVudC5wcm90bxIIc2VydmVyMk4iuQEKDEdsb2JhbE5vdGlj",
            "ZRIzCghub3RpVHlwZRgBIAEoDjIhLnNlcnZlcjJOLkdsb2JhbE5vdGljZS5O",
            "b3RpY2VJbmZvEg4KBm5vdGljZRgCIAEoCRIRCglwZXJmb3JtZXIYAyABKAUS",
            "DgoGdmljdGltGAQgAygFIkEKCk5vdGljZUluZm8SCwoHTm90aGluZxAAEgwK",
            "CEtpbGxJbmZvEAESCgoGTm90aWNlEAISDAoISXRlbUluZm8QAyKXAgoOVXNl",
            "ckNvbm5lY3Rpb24SEwoLY29ubmVjdG9ySWQYASADKAUSEAoIa2lsbEluZm8Y",
            "AiADKAUSEQoJZGVhdGhJbmZvGAMgAygFEhAKCG5pY2tuYW1lGAQgAygJEiAK",
            "BGl0ZW0YBSADKAsyEi5zZXJ2ZXIyTi5JbmZvSXRlbRI4Cgdjb25UeXBlGAYg",
            "ASgOMicuc2VydmVyMk4uVXNlckNvbm5lY3Rpb24uQ29ubmVjdGlvblR5cGUi",
            "XQoOQ29ubmVjdGlvblR5cGUSCwoHTm90aGluZxAAEgsKB0Nvbm5lY3QQARIO",
            "CgpUcnlDb25uZWN0EAISEQoNQWNjZXB0Q29ubmVjdBADEg4KCkRpc0Nvbm5l",
            "Y3QQBCJ5CglFdmVudE1vdmUSKwoEdHlwZRgFIAEoDjIdLnNlcnZlcjJOLkV2",
            "ZW50TW92ZS5EaXJlY3Rpb24iPwoJRGlyZWN0aW9uEgsKB05vdGhpbmcQABII",
            "CgRMZWZ0EAESCQoFUmlnaHQQAhIICgREb3duEAMSBgoCVXAQBCILCglFdmVu",
            "dFN0b3AiCwoJRXZlbnRKdW1wIoIBCgpFdmVudFNob290EhEKCXNob290VHlw",
            "ZRgBIAEoBRITCgtidWxsZXRTcGVlZBgCIAEoAhITCgtidWxsZXRSYW5nZRgD",
            "IAEoAhISCgpzaG9vdEFuZ2xlGAQgASgCEg4KBmRhbWFnZRgFIAEoAhITCgtp",
            "bXBhY3RTY2FsZRgGIAEoAiJyCghFdmVudEhpdBIPCgdoaXRUeXBlGAEgASgF",
            "Eg4KBmRhbWFnZRgCIAEoAhIPCgdpbXBhY3RYGAMgASgFEg8KB2ltcGFjdFkY",
            "BCABKAUSEQoJY3VycmVudEhQGAUgASgCEhAKCGF0dGFja2VyGAYgASgFIiUK",
            "EUV2ZW50Q2hhbmdlV2VhcG9uEhAKCHdlYXBvbklkGAEgASgFIgwKCkV2ZW50",
            "U3Bhd24iNAoNRXZlbnRVc2VyU3luYxIRCgljdXJyZW50SFAYASABKAISEAoI",
            "d2VhcG9uSWQYAiABKAUiHwoKRXZlbnREZWF0aBIRCgl0cmlnZ2VySWQYASAB",
            "KAUiMgoORXZlbnRJdGVtU3Bhd24SIAoEaXRlbRgBIAEoCzISLnNlcnZlcjJO",
            "LkluZm9JdGVtIjAKDEV2ZW50SXRlbUdldBIgCgRpdGVtGAEgASgLMhIuc2Vy",
            "dmVyMk4uSW5mb0l0ZW0ijQIKCEluZm9JdGVtEg4KBmFtb3VudBgEIAEoBRIO",
            "CgZpdGVtSWQYAiABKAkSLQoIaXRlbVR5cGUYBSABKA4yGy5zZXJ2ZXIyTi5J",
            "bmZvSXRlbS5JdGVtVHlwZRItCgh3ZWFwb25JZBgGIAEoDjIbLnNlcnZlcjJO",
            "LkluZm9JdGVtLldlYXBvbklkEhUKDUl0ZW1Qb3NpdGlvblgYByABKAISFQoN",
            "SXRlbVBvc2l0aW9uWRgIIAEoAiIkCghJdGVtVHlwZRILCgdSZWNvdmVyEAAS",
            "CwoHV2VhcG9uZRABIi8KCFdlYXBvbklkEgsKB05vdGhpbmcQABIKCgZQaXN0",
            "b2wQARIKCgZTbmlwZXIQAiLZAgoJR2FtZUV2ZW50EiYKCXVzZXJFdmVudBgD",
            "IAEoCzITLnNlcnZlcjJOLlVzZXJFdmVudBIqCgtzeXN0ZW1FdmVudBgEIAEo",
            "CzIVLnNlcnZlcjJOLlN5c3RlbUV2ZW50EhYKDkV2ZW50UG9zaXRpb25YGAYg",
            "ASgCEhYKDkV2ZW50UG9zaXRpb25ZGAcgASgCEhEKCVZlbG9jaXR5WBgIIAEo",
            "AhIRCglWZWxvY2l0eVkYCSABKAISEQoJaW52b2tlcklkGAogAygFEhQKDGlz",
            "SW50ZXJlc3RlZBgLIAEoCBIPCgdpc0xvY2FsGAwgASgIEi4KB2V2dFR5cGUY",
            "DSABKA4yHS5zZXJ2ZXIyTi5HYW1lRXZlbnQuZXZlbnRUeXBlIjgKCWV2ZW50",
            "VHlwZRILCgdOb3RoaW5nEAASDQoJVXNlckV2ZW50EAESDwoLU3lzdGVtRXZl",
            "bnQQAiLeAQoLU3lzdGVtRXZlbnQSLgoHYWN0VHlwZRjKASABKA4yHC5zZXJ2",
            "ZXIyTi5TeXN0ZW1FdmVudC5hY3Rpb24SMQoOaXRlbVNwYXduRXZlbnQYywEg",
            "ASgLMhguc2VydmVyMk4uRXZlbnRJdGVtU3Bhd24SLQoMaXRlbUdldEV2ZW50",
            "GMwBIAEoCzIWLnNlcnZlcjJOLkV2ZW50SXRlbUdldCI9CgZhY3Rpb24SCwoH",
            "Tm90aGluZxAAEhMKDkV2ZW50SXRlbVNwYXduEMgBEhEKDEV2ZW50SXRlbUdl",
            "dBDJASLSBQoJVXNlckV2ZW50EisKB2FjdFR5cGUYbiABKA4yGi5zZXJ2ZXIy",
            "Ti5Vc2VyRXZlbnQuYWN0aW9uEiYKCW1vdmVFdmVudBhvIAEoCzITLnNlcnZl",
            "cjJOLkV2ZW50TW92ZRImCglzdG9wRXZlbnQYcCABKAsyEy5zZXJ2ZXIyTi5F",
            "dmVudFN0b3ASJgoJanVtcEV2ZW50GHEgASgLMhMuc2VydmVyMk4uRXZlbnRK",
            "dW1wEigKCnNob290RXZlbnQYciABKAsyFC5zZXJ2ZXIyTi5FdmVudFNob290",
            "EiQKCGhpdEV2ZW50GHMgASgLMhIuc2VydmVyMk4uRXZlbnRIaXQSKAoKc3Bh",
            "d25FdmVudBh0IAEoCzIULnNlcnZlcjJOLkV2ZW50U3Bhd24SKgoJc3luY0V2",
            "ZW50GHUgASgLMhcuc2VydmVyMk4uRXZlbnRVc2VyU3luYxIoCgpkZWF0aEV2",
            "ZW50GHYgASgLMhQuc2VydmVyMk4uRXZlbnREZWF0aBIyCg1jaFdlYXBvbkV2",
            "ZW50GHcgASgLMhsuc2VydmVyMk4uRXZlbnRDaGFuZ2VXZWFwb24SMAoOaXRl",
            "bVNwYXduRXZlbnQYeCABKAsyGC5zZXJ2ZXIyTi5FdmVudEl0ZW1TcGF3bhIs",
            "CgxpdGVtR2V0RXZlbnQYeSABKAsyFi5zZXJ2ZXIyTi5FdmVudEl0ZW1HZXQi",
            "uwEKBmFjdGlvbhILCgdOb3RoaW5nEAASDQoJRXZlbnRNb3ZlEGQSDQoJRXZl",
            "bnRTdG9wEGUSDQoJRXZlbnRKdW1wEGYSDgoKRXZlbnRTaG9vdBBnEgwKCEV2",
            "ZW50SGl0EGgSDgoKRXZlbnRTcGF3bhBpEhEKDUV2ZW50VXNlclN5bmMQahIO",
            "CgpFdmVudERlYXRoEGsSDwoLRXZlbnRCdWxsZXQQbBIVChFFdmVudENoYW5n",
            "ZVdlYXBvbhBtIpACCgpQYWNrZXRCb2R5EjIKB21zZ1R5cGUYkE4gASgOMiAu",
            "c2VydmVyMk4uUGFja2V0Qm9keS5tZXNzYWdlVHlwZRIpCgdjb25uZWN0GAYg",
            "ASgLMhguc2VydmVyMk4uVXNlckNvbm5lY3Rpb24SJwoGbm90aWNlGJFOIAEo",
            "CzIWLnNlcnZlcjJOLkdsb2JhbE5vdGljZRIiCgVldmVudBgHIAEoCzITLnNl",
            "cnZlcjJOLkdhbWVFdmVudBIQCghzZW5kZXJJZBgIIAEoBSJECgttZXNzYWdl",
            "VHlwZRINCglHYW1lRXZlbnQQABITCg5Vc2VyQ29ubmVjdGlvbhCQThIRCgxH",
            "bG9iYWxOb3RpY2UQkU5iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.GlobalNotice), global::Server2N.GlobalNotice.Parser, new[]{ "NotiType", "Notice", "Performer", "Victim" }, null, new[]{ typeof(global::Server2N.GlobalNotice.Types.NoticeInfo) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.UserConnection), global::Server2N.UserConnection.Parser, new[]{ "ConnectorId", "KillInfo", "DeathInfo", "Nickname", "Item", "ConType" }, null, new[]{ typeof(global::Server2N.UserConnection.Types.ConnectionType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventMove), global::Server2N.EventMove.Parser, new[]{ "Type" }, null, new[]{ typeof(global::Server2N.EventMove.Types.Direction) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventStop), global::Server2N.EventStop.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventJump), global::Server2N.EventJump.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventShoot), global::Server2N.EventShoot.Parser, new[]{ "ShootType", "BulletSpeed", "BulletRange", "ShootAngle", "Damage", "ImpactScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventHit), global::Server2N.EventHit.Parser, new[]{ "HitType", "Damage", "ImpactX", "ImpactY", "CurrentHP", "Attacker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventChangeWeapon), global::Server2N.EventChangeWeapon.Parser, new[]{ "WeaponId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventSpawn), global::Server2N.EventSpawn.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventUserSync), global::Server2N.EventUserSync.Parser, new[]{ "CurrentHP", "WeaponId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventDeath), global::Server2N.EventDeath.Parser, new[]{ "TriggerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventItemSpawn), global::Server2N.EventItemSpawn.Parser, new[]{ "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventItemGet), global::Server2N.EventItemGet.Parser, new[]{ "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.InfoItem), global::Server2N.InfoItem.Parser, new[]{ "Amount", "ItemId", "ItemType", "WeaponId", "ItemPositionX", "ItemPositionY" }, null, new[]{ typeof(global::Server2N.InfoItem.Types.ItemType), typeof(global::Server2N.InfoItem.Types.WeaponId) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.GameEvent), global::Server2N.GameEvent.Parser, new[]{ "UserEvent", "SystemEvent", "EventPositionX", "EventPositionY", "VelocityX", "VelocityY", "InvokerId", "IsInterested", "IsLocal", "EvtType" }, null, new[]{ typeof(global::Server2N.GameEvent.Types.eventType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.SystemEvent), global::Server2N.SystemEvent.Parser, new[]{ "ActType", "ItemSpawnEvent", "ItemGetEvent" }, null, new[]{ typeof(global::Server2N.SystemEvent.Types.action) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.UserEvent), global::Server2N.UserEvent.Parser, new[]{ "ActType", "MoveEvent", "StopEvent", "JumpEvent", "ShootEvent", "HitEvent", "SpawnEvent", "SyncEvent", "DeathEvent", "ChWeaponEvent", "ItemSpawnEvent", "ItemGetEvent" }, null, new[]{ typeof(global::Server2N.UserEvent.Types.action) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.PacketBody), global::Server2N.PacketBody.Parser, new[]{ "MsgType", "Connect", "Notice", "Event", "SenderId" }, null, new[]{ typeof(global::Server2N.PacketBody.Types.messageType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GlobalNotice : pb::IMessage<GlobalNotice> {
    private static readonly pb::MessageParser<GlobalNotice> _parser = new pb::MessageParser<GlobalNotice>(() => new GlobalNotice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalNotice(GlobalNotice other) : this() {
      notiType_ = other.notiType_;
      notice_ = other.notice_;
      performer_ = other.performer_;
      victim_ = other.victim_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalNotice Clone() {
      return new GlobalNotice(this);
    }

    /// <summary>Field number for the "notiType" field.</summary>
    public const int NotiTypeFieldNumber = 1;
    private global::Server2N.GlobalNotice.Types.NoticeInfo notiType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.GlobalNotice.Types.NoticeInfo NotiType {
      get { return notiType_; }
      set {
        notiType_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 2;
    private string notice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "performer" field.</summary>
    public const int PerformerFieldNumber = 3;
    private int performer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Performer {
      get { return performer_; }
      set {
        performer_ = value;
      }
    }

    /// <summary>Field number for the "victim" field.</summary>
    public const int VictimFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_victim_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> victim_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Victim {
      get { return victim_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NotiType != other.NotiType) return false;
      if (Notice != other.Notice) return false;
      if (Performer != other.Performer) return false;
      if(!victim_.Equals(other.victim_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NotiType != 0) hash ^= NotiType.GetHashCode();
      if (Notice.Length != 0) hash ^= Notice.GetHashCode();
      if (Performer != 0) hash ^= Performer.GetHashCode();
      hash ^= victim_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NotiType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NotiType);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Notice);
      }
      if (Performer != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Performer);
      }
      victim_.WriteTo(output, _repeated_victim_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NotiType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NotiType);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      if (Performer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Performer);
      }
      size += victim_.CalculateSize(_repeated_victim_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalNotice other) {
      if (other == null) {
        return;
      }
      if (other.NotiType != 0) {
        NotiType = other.NotiType;
      }
      if (other.Notice.Length != 0) {
        Notice = other.Notice;
      }
      if (other.Performer != 0) {
        Performer = other.Performer;
      }
      victim_.Add(other.victim_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            notiType_ = (global::Server2N.GlobalNotice.Types.NoticeInfo) input.ReadEnum();
            break;
          }
          case 18: {
            Notice = input.ReadString();
            break;
          }
          case 24: {
            Performer = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            victim_.AddEntriesFrom(input, _repeated_victim_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GlobalNotice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NoticeInfo {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("KillInfo")] KillInfo = 1,
        [pbr::OriginalName("Notice")] Notice = 2,
        [pbr::OriginalName("ItemInfo")] ItemInfo = 3,
      }

    }
    #endregion

  }

  public sealed partial class UserConnection : pb::IMessage<UserConnection> {
    private static readonly pb::MessageParser<UserConnection> _parser = new pb::MessageParser<UserConnection>(() => new UserConnection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserConnection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnection(UserConnection other) : this() {
      connectorId_ = other.connectorId_.Clone();
      killInfo_ = other.killInfo_.Clone();
      deathInfo_ = other.deathInfo_.Clone();
      nickname_ = other.nickname_.Clone();
      item_ = other.item_.Clone();
      conType_ = other.conType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnection Clone() {
      return new UserConnection(this);
    }

    /// <summary>Field number for the "connectorId" field.</summary>
    public const int ConnectorIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_connectorId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> connectorId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ConnectorId {
      get { return connectorId_; }
    }

    /// <summary>Field number for the "killInfo" field.</summary>
    public const int KillInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_killInfo_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> killInfo_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> KillInfo {
      get { return killInfo_; }
    }

    /// <summary>Field number for the "deathInfo" field.</summary>
    public const int DeathInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_deathInfo_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> deathInfo_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DeathInfo {
      get { return deathInfo_; }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_nickname_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> nickname_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Nickname {
      get { return nickname_; }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Server2N.InfoItem> _repeated_item_codec
        = pb::FieldCodec.ForMessage(42, global::Server2N.InfoItem.Parser);
    private readonly pbc::RepeatedField<global::Server2N.InfoItem> item_ = new pbc::RepeatedField<global::Server2N.InfoItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Server2N.InfoItem> Item {
      get { return item_; }
    }

    /// <summary>Field number for the "conType" field.</summary>
    public const int ConTypeFieldNumber = 6;
    private global::Server2N.UserConnection.Types.ConnectionType conType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.UserConnection.Types.ConnectionType ConType {
      get { return conType_; }
      set {
        conType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserConnection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserConnection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!connectorId_.Equals(other.connectorId_)) return false;
      if(!killInfo_.Equals(other.killInfo_)) return false;
      if(!deathInfo_.Equals(other.deathInfo_)) return false;
      if(!nickname_.Equals(other.nickname_)) return false;
      if(!item_.Equals(other.item_)) return false;
      if (ConType != other.ConType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= connectorId_.GetHashCode();
      hash ^= killInfo_.GetHashCode();
      hash ^= deathInfo_.GetHashCode();
      hash ^= nickname_.GetHashCode();
      hash ^= item_.GetHashCode();
      if (ConType != 0) hash ^= ConType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      connectorId_.WriteTo(output, _repeated_connectorId_codec);
      killInfo_.WriteTo(output, _repeated_killInfo_codec);
      deathInfo_.WriteTo(output, _repeated_deathInfo_codec);
      nickname_.WriteTo(output, _repeated_nickname_codec);
      item_.WriteTo(output, _repeated_item_codec);
      if (ConType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ConType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += connectorId_.CalculateSize(_repeated_connectorId_codec);
      size += killInfo_.CalculateSize(_repeated_killInfo_codec);
      size += deathInfo_.CalculateSize(_repeated_deathInfo_codec);
      size += nickname_.CalculateSize(_repeated_nickname_codec);
      size += item_.CalculateSize(_repeated_item_codec);
      if (ConType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserConnection other) {
      if (other == null) {
        return;
      }
      connectorId_.Add(other.connectorId_);
      killInfo_.Add(other.killInfo_);
      deathInfo_.Add(other.deathInfo_);
      nickname_.Add(other.nickname_);
      item_.Add(other.item_);
      if (other.ConType != 0) {
        ConType = other.ConType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            connectorId_.AddEntriesFrom(input, _repeated_connectorId_codec);
            break;
          }
          case 18:
          case 16: {
            killInfo_.AddEntriesFrom(input, _repeated_killInfo_codec);
            break;
          }
          case 26:
          case 24: {
            deathInfo_.AddEntriesFrom(input, _repeated_deathInfo_codec);
            break;
          }
          case 34: {
            nickname_.AddEntriesFrom(input, _repeated_nickname_codec);
            break;
          }
          case 42: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
          case 48: {
            conType_ = (global::Server2N.UserConnection.Types.ConnectionType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserConnection message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ConnectionType {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("Connect")] Connect = 1,
        [pbr::OriginalName("TryConnect")] TryConnect = 2,
        [pbr::OriginalName("AcceptConnect")] AcceptConnect = 3,
        [pbr::OriginalName("DisConnect")] DisConnect = 4,
      }

    }
    #endregion

  }

  public sealed partial class EventMove : pb::IMessage<EventMove> {
    private static readonly pb::MessageParser<EventMove> _parser = new pb::MessageParser<EventMove>(() => new EventMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMove(EventMove other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMove Clone() {
      return new EventMove(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Server2N.EventMove.Types.Direction type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventMove.Types.Direction Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMove other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 40: {
            type_ = (global::Server2N.EventMove.Types.Direction) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EventMove message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Direction {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("Left")] Left = 1,
        [pbr::OriginalName("Right")] Right = 2,
        [pbr::OriginalName("Down")] Down = 3,
        [pbr::OriginalName("Up")] Up = 4,
      }

    }
    #endregion

  }

  public sealed partial class EventStop : pb::IMessage<EventStop> {
    private static readonly pb::MessageParser<EventStop> _parser = new pb::MessageParser<EventStop>(() => new EventStop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventStop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStop(EventStop other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStop Clone() {
      return new EventStop(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventStop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventStop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventStop other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class EventJump : pb::IMessage<EventJump> {
    private static readonly pb::MessageParser<EventJump> _parser = new pb::MessageParser<EventJump>(() => new EventJump());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventJump> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventJump() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventJump(EventJump other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventJump Clone() {
      return new EventJump(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventJump);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventJump other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventJump other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class EventShoot : pb::IMessage<EventShoot> {
    private static readonly pb::MessageParser<EventShoot> _parser = new pb::MessageParser<EventShoot>(() => new EventShoot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventShoot(EventShoot other) : this() {
      shootType_ = other.shootType_;
      bulletSpeed_ = other.bulletSpeed_;
      bulletRange_ = other.bulletRange_;
      shootAngle_ = other.shootAngle_;
      damage_ = other.damage_;
      impactScale_ = other.impactScale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventShoot Clone() {
      return new EventShoot(this);
    }

    /// <summary>Field number for the "shootType" field.</summary>
    public const int ShootTypeFieldNumber = 1;
    private int shootType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShootType {
      get { return shootType_; }
      set {
        shootType_ = value;
      }
    }

    /// <summary>Field number for the "bulletSpeed" field.</summary>
    public const int BulletSpeedFieldNumber = 2;
    private float bulletSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BulletSpeed {
      get { return bulletSpeed_; }
      set {
        bulletSpeed_ = value;
      }
    }

    /// <summary>Field number for the "bulletRange" field.</summary>
    public const int BulletRangeFieldNumber = 3;
    private float bulletRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BulletRange {
      get { return bulletRange_; }
      set {
        bulletRange_ = value;
      }
    }

    /// <summary>Field number for the "shootAngle" field.</summary>
    public const int ShootAngleFieldNumber = 4;
    private float shootAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShootAngle {
      get { return shootAngle_; }
      set {
        shootAngle_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 5;
    private float damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "impactScale" field.</summary>
    public const int ImpactScaleFieldNumber = 6;
    private float impactScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ImpactScale {
      get { return impactScale_; }
      set {
        impactScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShootType != other.ShootType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BulletSpeed, other.BulletSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BulletRange, other.BulletRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShootAngle, other.ShootAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Damage, other.Damage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ImpactScale, other.ImpactScale)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShootType != 0) hash ^= ShootType.GetHashCode();
      if (BulletSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BulletSpeed);
      if (BulletRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BulletRange);
      if (ShootAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShootAngle);
      if (Damage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Damage);
      if (ImpactScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ImpactScale);
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShootType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShootType);
      }
      if (BulletSpeed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BulletSpeed);
      }
      if (BulletRange != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BulletRange);
      }
      if (ShootAngle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ShootAngle);
      }
      if (Damage != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Damage);
      }
      if (ImpactScale != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ImpactScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShootType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShootType);
      }
      if (BulletSpeed != 0F) {
        size += 1 + 4;
      }
      if (BulletRange != 0F) {
        size += 1 + 4;
      }
      if (ShootAngle != 0F) {
        size += 1 + 4;
      }
      if (Damage != 0F) {
        size += 1 + 4;
      }
      if (ImpactScale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventShoot other) {
      if (other == null) {
        return;
      }
      if (other.ShootType != 0) {
        ShootType = other.ShootType;
      }
      if (other.BulletSpeed != 0F) {
        BulletSpeed = other.BulletSpeed;
      }
      if (other.BulletRange != 0F) {
        BulletRange = other.BulletRange;
      }
      if (other.ShootAngle != 0F) {
        ShootAngle = other.ShootAngle;
      }
      if (other.Damage != 0F) {
        Damage = other.Damage;
      }
      if (other.ImpactScale != 0F) {
        ImpactScale = other.ImpactScale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShootType = input.ReadInt32();
            break;
          }
          case 21: {
            BulletSpeed = input.ReadFloat();
            break;
          }
          case 29: {
            BulletRange = input.ReadFloat();
            break;
          }
          case 37: {
            ShootAngle = input.ReadFloat();
            break;
          }
          case 45: {
            Damage = input.ReadFloat();
            break;
          }
          case 53: {
            ImpactScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventHit : pb::IMessage<EventHit> {
    private static readonly pb::MessageParser<EventHit> _parser = new pb::MessageParser<EventHit>(() => new EventHit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHit(EventHit other) : this() {
      hitType_ = other.hitType_;
      damage_ = other.damage_;
      impactX_ = other.impactX_;
      impactY_ = other.impactY_;
      currentHP_ = other.currentHP_;
      attacker_ = other.attacker_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHit Clone() {
      return new EventHit(this);
    }

    /// <summary>Field number for the "hitType" field.</summary>
    public const int HitTypeFieldNumber = 1;
    private int hitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitType {
      get { return hitType_; }
      set {
        hitType_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 2;
    private float damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "impactX" field.</summary>
    public const int ImpactXFieldNumber = 3;
    private int impactX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImpactX {
      get { return impactX_; }
      set {
        impactX_ = value;
      }
    }

    /// <summary>Field number for the "impactY" field.</summary>
    public const int ImpactYFieldNumber = 4;
    private int impactY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImpactY {
      get { return impactY_; }
      set {
        impactY_ = value;
      }
    }

    /// <summary>Field number for the "currentHP" field.</summary>
    public const int CurrentHPFieldNumber = 5;
    private float currentHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentHP {
      get { return currentHP_; }
      set {
        currentHP_ = value;
      }
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 6;
    private int attacker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attacker {
      get { return attacker_; }
      set {
        attacker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HitType != other.HitType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Damage, other.Damage)) return false;
      if (ImpactX != other.ImpactX) return false;
      if (ImpactY != other.ImpactY) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentHP, other.CurrentHP)) return false;
      if (Attacker != other.Attacker) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HitType != 0) hash ^= HitType.GetHashCode();
      if (Damage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Damage);
      if (ImpactX != 0) hash ^= ImpactX.GetHashCode();
      if (ImpactY != 0) hash ^= ImpactY.GetHashCode();
      if (CurrentHP != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentHP);
      if (Attacker != 0) hash ^= Attacker.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HitType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitType);
      }
      if (Damage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Damage);
      }
      if (ImpactX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ImpactX);
      }
      if (ImpactY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ImpactY);
      }
      if (CurrentHP != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CurrentHP);
      }
      if (Attacker != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Attacker);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitType);
      }
      if (Damage != 0F) {
        size += 1 + 4;
      }
      if (ImpactX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactX);
      }
      if (ImpactY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactY);
      }
      if (CurrentHP != 0F) {
        size += 1 + 4;
      }
      if (Attacker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attacker);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventHit other) {
      if (other == null) {
        return;
      }
      if (other.HitType != 0) {
        HitType = other.HitType;
      }
      if (other.Damage != 0F) {
        Damage = other.Damage;
      }
      if (other.ImpactX != 0) {
        ImpactX = other.ImpactX;
      }
      if (other.ImpactY != 0) {
        ImpactY = other.ImpactY;
      }
      if (other.CurrentHP != 0F) {
        CurrentHP = other.CurrentHP;
      }
      if (other.Attacker != 0) {
        Attacker = other.Attacker;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HitType = input.ReadInt32();
            break;
          }
          case 21: {
            Damage = input.ReadFloat();
            break;
          }
          case 24: {
            ImpactX = input.ReadInt32();
            break;
          }
          case 32: {
            ImpactY = input.ReadInt32();
            break;
          }
          case 45: {
            CurrentHP = input.ReadFloat();
            break;
          }
          case 48: {
            Attacker = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventChangeWeapon : pb::IMessage<EventChangeWeapon> {
    private static readonly pb::MessageParser<EventChangeWeapon> _parser = new pb::MessageParser<EventChangeWeapon>(() => new EventChangeWeapon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventChangeWeapon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventChangeWeapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventChangeWeapon(EventChangeWeapon other) : this() {
      weaponId_ = other.weaponId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventChangeWeapon Clone() {
      return new EventChangeWeapon(this);
    }

    /// <summary>Field number for the "weaponId" field.</summary>
    public const int WeaponIdFieldNumber = 1;
    private int weaponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventChangeWeapon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventChangeWeapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeaponId != other.WeaponId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WeaponId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WeaponId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventChangeWeapon other) {
      if (other == null) {
        return;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WeaponId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventSpawn : pb::IMessage<EventSpawn> {
    private static readonly pb::MessageParser<EventSpawn> _parser = new pb::MessageParser<EventSpawn>(() => new EventSpawn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSpawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSpawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSpawn(EventSpawn other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSpawn Clone() {
      return new EventSpawn(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSpawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSpawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSpawn other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class EventUserSync : pb::IMessage<EventUserSync> {
    private static readonly pb::MessageParser<EventUserSync> _parser = new pb::MessageParser<EventUserSync>(() => new EventUserSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventUserSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventUserSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventUserSync(EventUserSync other) : this() {
      currentHP_ = other.currentHP_;
      weaponId_ = other.weaponId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventUserSync Clone() {
      return new EventUserSync(this);
    }

    /// <summary>Field number for the "currentHP" field.</summary>
    public const int CurrentHPFieldNumber = 1;
    private float currentHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentHP {
      get { return currentHP_; }
      set {
        currentHP_ = value;
      }
    }

    /// <summary>Field number for the "weaponId" field.</summary>
    public const int WeaponIdFieldNumber = 2;
    private int weaponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventUserSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventUserSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentHP, other.CurrentHP)) return false;
      if (WeaponId != other.WeaponId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentHP != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentHP);
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentHP != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(CurrentHP);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WeaponId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentHP != 0F) {
        size += 1 + 4;
      }
      if (WeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventUserSync other) {
      if (other == null) {
        return;
      }
      if (other.CurrentHP != 0F) {
        CurrentHP = other.CurrentHP;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            CurrentHP = input.ReadFloat();
            break;
          }
          case 16: {
            WeaponId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventDeath : pb::IMessage<EventDeath> {
    private static readonly pb::MessageParser<EventDeath> _parser = new pb::MessageParser<EventDeath>(() => new EventDeath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDeath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDeath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDeath(EventDeath other) : this() {
      triggerId_ = other.triggerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDeath Clone() {
      return new EventDeath(this);
    }

    /// <summary>Field number for the "triggerId" field.</summary>
    public const int TriggerIdFieldNumber = 1;
    private int triggerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerId {
      get { return triggerId_; }
      set {
        triggerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDeath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDeath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TriggerId != other.TriggerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TriggerId != 0) hash ^= TriggerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TriggerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TriggerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDeath other) {
      if (other == null) {
        return;
      }
      if (other.TriggerId != 0) {
        TriggerId = other.TriggerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TriggerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventItemSpawn : pb::IMessage<EventItemSpawn> {
    private static readonly pb::MessageParser<EventItemSpawn> _parser = new pb::MessageParser<EventItemSpawn>(() => new EventItemSpawn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventItemSpawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventItemSpawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventItemSpawn(EventItemSpawn other) : this() {
      Item = other.item_ != null ? other.Item.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventItemSpawn Clone() {
      return new EventItemSpawn(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::Server2N.InfoItem item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.InfoItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventItemSpawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventItemSpawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Item, other.Item)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_ != null) hash ^= Item.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventItemSpawn other) {
      if (other == null) {
        return;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Server2N.InfoItem();
        }
        Item.MergeFrom(other.Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::Server2N.InfoItem();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventItemGet : pb::IMessage<EventItemGet> {
    private static readonly pb::MessageParser<EventItemGet> _parser = new pb::MessageParser<EventItemGet>(() => new EventItemGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventItemGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventItemGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventItemGet(EventItemGet other) : this() {
      Item = other.item_ != null ? other.Item.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventItemGet Clone() {
      return new EventItemGet(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::Server2N.InfoItem item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.InfoItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventItemGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventItemGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Item, other.Item)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_ != null) hash ^= Item.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventItemGet other) {
      if (other == null) {
        return;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Server2N.InfoItem();
        }
        Item.MergeFrom(other.Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::Server2N.InfoItem();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InfoItem : pb::IMessage<InfoItem> {
    private static readonly pb::MessageParser<InfoItem> _parser = new pb::MessageParser<InfoItem>(() => new InfoItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoItem(InfoItem other) : this() {
      amount_ = other.amount_;
      itemId_ = other.itemId_;
      itemType_ = other.itemType_;
      weaponId_ = other.weaponId_;
      itemPositionX_ = other.itemPositionX_;
      itemPositionY_ = other.itemPositionY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoItem Clone() {
      return new InfoItem(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private string itemId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itemType" field.</summary>
    public const int ItemTypeFieldNumber = 5;
    private global::Server2N.InfoItem.Types.ItemType itemType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.InfoItem.Types.ItemType ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "weaponId" field.</summary>
    public const int WeaponIdFieldNumber = 6;
    private global::Server2N.InfoItem.Types.WeaponId weaponId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.InfoItem.Types.WeaponId WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    /// <summary>Field number for the "ItemPositionX" field.</summary>
    public const int ItemPositionXFieldNumber = 7;
    private float itemPositionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ItemPositionX {
      get { return itemPositionX_; }
      set {
        itemPositionX_ = value;
      }
    }

    /// <summary>Field number for the "ItemPositionY" field.</summary>
    public const int ItemPositionYFieldNumber = 8;
    private float itemPositionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ItemPositionY {
      get { return itemPositionY_; }
      set {
        itemPositionY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      if (ItemId != other.ItemId) return false;
      if (ItemType != other.ItemType) return false;
      if (WeaponId != other.WeaponId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ItemPositionX, other.ItemPositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ItemPositionY, other.ItemPositionY)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      if (ItemPositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ItemPositionX);
      if (ItemPositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ItemPositionY);
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (Amount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Amount);
      }
      if (ItemType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ItemType);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) WeaponId);
      }
      if (ItemPositionX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(ItemPositionX);
      }
      if (ItemPositionY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ItemPositionY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemType);
      }
      if (WeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WeaponId);
      }
      if (ItemPositionX != 0F) {
        size += 1 + 4;
      }
      if (ItemPositionY != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoItem other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.ItemId.Length != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
      if (other.ItemPositionX != 0F) {
        ItemPositionX = other.ItemPositionX;
      }
      if (other.ItemPositionY != 0F) {
        ItemPositionY = other.ItemPositionY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            ItemId = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadInt32();
            break;
          }
          case 40: {
            itemType_ = (global::Server2N.InfoItem.Types.ItemType) input.ReadEnum();
            break;
          }
          case 48: {
            weaponId_ = (global::Server2N.InfoItem.Types.WeaponId) input.ReadEnum();
            break;
          }
          case 61: {
            ItemPositionX = input.ReadFloat();
            break;
          }
          case 69: {
            ItemPositionY = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InfoItem message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ItemType {
        [pbr::OriginalName("Recover")] Recover = 0,
        [pbr::OriginalName("Weapone")] Weapone = 1,
      }

      public enum WeaponId {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("Pistol")] Pistol = 1,
        [pbr::OriginalName("Sniper")] Sniper = 2,
      }

    }
    #endregion

  }

  public sealed partial class GameEvent : pb::IMessage<GameEvent> {
    private static readonly pb::MessageParser<GameEvent> _parser = new pb::MessageParser<GameEvent>(() => new GameEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent(GameEvent other) : this() {
      UserEvent = other.userEvent_ != null ? other.UserEvent.Clone() : null;
      SystemEvent = other.systemEvent_ != null ? other.SystemEvent.Clone() : null;
      eventPositionX_ = other.eventPositionX_;
      eventPositionY_ = other.eventPositionY_;
      velocityX_ = other.velocityX_;
      velocityY_ = other.velocityY_;
      invokerId_ = other.invokerId_.Clone();
      isInterested_ = other.isInterested_;
      isLocal_ = other.isLocal_;
      evtType_ = other.evtType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent Clone() {
      return new GameEvent(this);
    }

    /// <summary>Field number for the "userEvent" field.</summary>
    public const int UserEventFieldNumber = 3;
    private global::Server2N.UserEvent userEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.UserEvent UserEvent {
      get { return userEvent_; }
      set {
        userEvent_ = value;
      }
    }

    /// <summary>Field number for the "systemEvent" field.</summary>
    public const int SystemEventFieldNumber = 4;
    private global::Server2N.SystemEvent systemEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.SystemEvent SystemEvent {
      get { return systemEvent_; }
      set {
        systemEvent_ = value;
      }
    }

    /// <summary>Field number for the "EventPositionX" field.</summary>
    public const int EventPositionXFieldNumber = 6;
    private float eventPositionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EventPositionX {
      get { return eventPositionX_; }
      set {
        eventPositionX_ = value;
      }
    }

    /// <summary>Field number for the "EventPositionY" field.</summary>
    public const int EventPositionYFieldNumber = 7;
    private float eventPositionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EventPositionY {
      get { return eventPositionY_; }
      set {
        eventPositionY_ = value;
      }
    }

    /// <summary>Field number for the "VelocityX" field.</summary>
    public const int VelocityXFieldNumber = 8;
    private float velocityX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    /// <summary>Field number for the "VelocityY" field.</summary>
    public const int VelocityYFieldNumber = 9;
    private float velocityY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    /// <summary>Field number for the "invokerId" field.</summary>
    public const int InvokerIdFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_invokerId_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> invokerId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InvokerId {
      get { return invokerId_; }
    }

    /// <summary>Field number for the "isInterested" field.</summary>
    public const int IsInterestedFieldNumber = 11;
    private bool isInterested_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInterested {
      get { return isInterested_; }
      set {
        isInterested_ = value;
      }
    }

    /// <summary>Field number for the "isLocal" field.</summary>
    public const int IsLocalFieldNumber = 12;
    private bool isLocal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLocal {
      get { return isLocal_; }
      set {
        isLocal_ = value;
      }
    }

    /// <summary>Field number for the "evtType" field.</summary>
    public const int EvtTypeFieldNumber = 13;
    private global::Server2N.GameEvent.Types.eventType evtType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.GameEvent.Types.eventType EvtType {
      get { return evtType_; }
      set {
        evtType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserEvent, other.UserEvent)) return false;
      if (!object.Equals(SystemEvent, other.SystemEvent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EventPositionX, other.EventPositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EventPositionY, other.EventPositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelocityX, other.VelocityX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelocityY, other.VelocityY)) return false;
      if(!invokerId_.Equals(other.invokerId_)) return false;
      if (IsInterested != other.IsInterested) return false;
      if (IsLocal != other.IsLocal) return false;
      if (EvtType != other.EvtType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userEvent_ != null) hash ^= UserEvent.GetHashCode();
      if (systemEvent_ != null) hash ^= SystemEvent.GetHashCode();
      if (EventPositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EventPositionX);
      if (EventPositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EventPositionY);
      if (VelocityX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelocityX);
      if (VelocityY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelocityY);
      hash ^= invokerId_.GetHashCode();
      if (IsInterested != false) hash ^= IsInterested.GetHashCode();
      if (IsLocal != false) hash ^= IsLocal.GetHashCode();
      if (EvtType != 0) hash ^= EvtType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userEvent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserEvent);
      }
      if (systemEvent_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SystemEvent);
      }
      if (EventPositionX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(EventPositionX);
      }
      if (EventPositionY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(EventPositionY);
      }
      if (VelocityX != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(VelocityX);
      }
      if (VelocityY != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(VelocityY);
      }
      invokerId_.WriteTo(output, _repeated_invokerId_codec);
      if (IsInterested != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsInterested);
      }
      if (IsLocal != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsLocal);
      }
      if (EvtType != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) EvtType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userEvent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserEvent);
      }
      if (systemEvent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SystemEvent);
      }
      if (EventPositionX != 0F) {
        size += 1 + 4;
      }
      if (EventPositionY != 0F) {
        size += 1 + 4;
      }
      if (VelocityX != 0F) {
        size += 1 + 4;
      }
      if (VelocityY != 0F) {
        size += 1 + 4;
      }
      size += invokerId_.CalculateSize(_repeated_invokerId_codec);
      if (IsInterested != false) {
        size += 1 + 1;
      }
      if (IsLocal != false) {
        size += 1 + 1;
      }
      if (EvtType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EvtType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEvent other) {
      if (other == null) {
        return;
      }
      if (other.userEvent_ != null) {
        if (userEvent_ == null) {
          userEvent_ = new global::Server2N.UserEvent();
        }
        UserEvent.MergeFrom(other.UserEvent);
      }
      if (other.systemEvent_ != null) {
        if (systemEvent_ == null) {
          systemEvent_ = new global::Server2N.SystemEvent();
        }
        SystemEvent.MergeFrom(other.SystemEvent);
      }
      if (other.EventPositionX != 0F) {
        EventPositionX = other.EventPositionX;
      }
      if (other.EventPositionY != 0F) {
        EventPositionY = other.EventPositionY;
      }
      if (other.VelocityX != 0F) {
        VelocityX = other.VelocityX;
      }
      if (other.VelocityY != 0F) {
        VelocityY = other.VelocityY;
      }
      invokerId_.Add(other.invokerId_);
      if (other.IsInterested != false) {
        IsInterested = other.IsInterested;
      }
      if (other.IsLocal != false) {
        IsLocal = other.IsLocal;
      }
      if (other.EvtType != 0) {
        EvtType = other.EvtType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (userEvent_ == null) {
              userEvent_ = new global::Server2N.UserEvent();
            }
            input.ReadMessage(userEvent_);
            break;
          }
          case 34: {
            if (systemEvent_ == null) {
              systemEvent_ = new global::Server2N.SystemEvent();
            }
            input.ReadMessage(systemEvent_);
            break;
          }
          case 53: {
            EventPositionX = input.ReadFloat();
            break;
          }
          case 61: {
            EventPositionY = input.ReadFloat();
            break;
          }
          case 69: {
            VelocityX = input.ReadFloat();
            break;
          }
          case 77: {
            VelocityY = input.ReadFloat();
            break;
          }
          case 82:
          case 80: {
            invokerId_.AddEntriesFrom(input, _repeated_invokerId_codec);
            break;
          }
          case 88: {
            IsInterested = input.ReadBool();
            break;
          }
          case 96: {
            IsLocal = input.ReadBool();
            break;
          }
          case 104: {
            evtType_ = (global::Server2N.GameEvent.Types.eventType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eventType {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("UserEvent")] UserEvent = 1,
        [pbr::OriginalName("SystemEvent")] SystemEvent = 2,
      }

    }
    #endregion

  }

  public sealed partial class SystemEvent : pb::IMessage<SystemEvent> {
    private static readonly pb::MessageParser<SystemEvent> _parser = new pb::MessageParser<SystemEvent>(() => new SystemEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemEvent(SystemEvent other) : this() {
      actType_ = other.actType_;
      ItemSpawnEvent = other.itemSpawnEvent_ != null ? other.ItemSpawnEvent.Clone() : null;
      ItemGetEvent = other.itemGetEvent_ != null ? other.ItemGetEvent.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemEvent Clone() {
      return new SystemEvent(this);
    }

    /// <summary>Field number for the "actType" field.</summary>
    public const int ActTypeFieldNumber = 202;
    private global::Server2N.SystemEvent.Types.action actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.SystemEvent.Types.action ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "itemSpawnEvent" field.</summary>
    public const int ItemSpawnEventFieldNumber = 203;
    private global::Server2N.EventItemSpawn itemSpawnEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventItemSpawn ItemSpawnEvent {
      get { return itemSpawnEvent_; }
      set {
        itemSpawnEvent_ = value;
      }
    }

    /// <summary>Field number for the "itemGetEvent" field.</summary>
    public const int ItemGetEventFieldNumber = 204;
    private global::Server2N.EventItemGet itemGetEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventItemGet ItemGetEvent {
      get { return itemGetEvent_; }
      set {
        itemGetEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActType != other.ActType) return false;
      if (!object.Equals(ItemSpawnEvent, other.ItemSpawnEvent)) return false;
      if (!object.Equals(ItemGetEvent, other.ItemGetEvent)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (itemSpawnEvent_ != null) hash ^= ItemSpawnEvent.GetHashCode();
      if (itemGetEvent_ != null) hash ^= ItemGetEvent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActType != 0) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) ActType);
      }
      if (itemSpawnEvent_ != null) {
        output.WriteRawTag(218, 12);
        output.WriteMessage(ItemSpawnEvent);
      }
      if (itemGetEvent_ != null) {
        output.WriteRawTag(226, 12);
        output.WriteMessage(ItemGetEvent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (itemSpawnEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ItemSpawnEvent);
      }
      if (itemGetEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ItemGetEvent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemEvent other) {
      if (other == null) {
        return;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.itemSpawnEvent_ != null) {
        if (itemSpawnEvent_ == null) {
          itemSpawnEvent_ = new global::Server2N.EventItemSpawn();
        }
        ItemSpawnEvent.MergeFrom(other.ItemSpawnEvent);
      }
      if (other.itemGetEvent_ != null) {
        if (itemGetEvent_ == null) {
          itemGetEvent_ = new global::Server2N.EventItemGet();
        }
        ItemGetEvent.MergeFrom(other.ItemGetEvent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 1616: {
            actType_ = (global::Server2N.SystemEvent.Types.action) input.ReadEnum();
            break;
          }
          case 1626: {
            if (itemSpawnEvent_ == null) {
              itemSpawnEvent_ = new global::Server2N.EventItemSpawn();
            }
            input.ReadMessage(itemSpawnEvent_);
            break;
          }
          case 1634: {
            if (itemGetEvent_ == null) {
              itemGetEvent_ = new global::Server2N.EventItemGet();
            }
            input.ReadMessage(itemGetEvent_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SystemEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum action {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("EventItemSpawn")] EventItemSpawn = 200,
        [pbr::OriginalName("EventItemGet")] EventItemGet = 201,
      }

    }
    #endregion

  }

  public sealed partial class UserEvent : pb::IMessage<UserEvent> {
    private static readonly pb::MessageParser<UserEvent> _parser = new pb::MessageParser<UserEvent>(() => new UserEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEvent(UserEvent other) : this() {
      actType_ = other.actType_;
      MoveEvent = other.moveEvent_ != null ? other.MoveEvent.Clone() : null;
      StopEvent = other.stopEvent_ != null ? other.StopEvent.Clone() : null;
      JumpEvent = other.jumpEvent_ != null ? other.JumpEvent.Clone() : null;
      ShootEvent = other.shootEvent_ != null ? other.ShootEvent.Clone() : null;
      HitEvent = other.hitEvent_ != null ? other.HitEvent.Clone() : null;
      SpawnEvent = other.spawnEvent_ != null ? other.SpawnEvent.Clone() : null;
      SyncEvent = other.syncEvent_ != null ? other.SyncEvent.Clone() : null;
      DeathEvent = other.deathEvent_ != null ? other.DeathEvent.Clone() : null;
      ChWeaponEvent = other.chWeaponEvent_ != null ? other.ChWeaponEvent.Clone() : null;
      ItemSpawnEvent = other.itemSpawnEvent_ != null ? other.ItemSpawnEvent.Clone() : null;
      ItemGetEvent = other.itemGetEvent_ != null ? other.ItemGetEvent.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEvent Clone() {
      return new UserEvent(this);
    }

    /// <summary>Field number for the "actType" field.</summary>
    public const int ActTypeFieldNumber = 110;
    private global::Server2N.UserEvent.Types.action actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.UserEvent.Types.action ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "moveEvent" field.</summary>
    public const int MoveEventFieldNumber = 111;
    private global::Server2N.EventMove moveEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventMove MoveEvent {
      get { return moveEvent_; }
      set {
        moveEvent_ = value;
      }
    }

    /// <summary>Field number for the "stopEvent" field.</summary>
    public const int StopEventFieldNumber = 112;
    private global::Server2N.EventStop stopEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventStop StopEvent {
      get { return stopEvent_; }
      set {
        stopEvent_ = value;
      }
    }

    /// <summary>Field number for the "jumpEvent" field.</summary>
    public const int JumpEventFieldNumber = 113;
    private global::Server2N.EventJump jumpEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventJump JumpEvent {
      get { return jumpEvent_; }
      set {
        jumpEvent_ = value;
      }
    }

    /// <summary>Field number for the "shootEvent" field.</summary>
    public const int ShootEventFieldNumber = 114;
    private global::Server2N.EventShoot shootEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventShoot ShootEvent {
      get { return shootEvent_; }
      set {
        shootEvent_ = value;
      }
    }

    /// <summary>Field number for the "hitEvent" field.</summary>
    public const int HitEventFieldNumber = 115;
    private global::Server2N.EventHit hitEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventHit HitEvent {
      get { return hitEvent_; }
      set {
        hitEvent_ = value;
      }
    }

    /// <summary>Field number for the "spawnEvent" field.</summary>
    public const int SpawnEventFieldNumber = 116;
    private global::Server2N.EventSpawn spawnEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventSpawn SpawnEvent {
      get { return spawnEvent_; }
      set {
        spawnEvent_ = value;
      }
    }

    /// <summary>Field number for the "syncEvent" field.</summary>
    public const int SyncEventFieldNumber = 117;
    private global::Server2N.EventUserSync syncEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventUserSync SyncEvent {
      get { return syncEvent_; }
      set {
        syncEvent_ = value;
      }
    }

    /// <summary>Field number for the "deathEvent" field.</summary>
    public const int DeathEventFieldNumber = 118;
    private global::Server2N.EventDeath deathEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventDeath DeathEvent {
      get { return deathEvent_; }
      set {
        deathEvent_ = value;
      }
    }

    /// <summary>Field number for the "chWeaponEvent" field.</summary>
    public const int ChWeaponEventFieldNumber = 119;
    private global::Server2N.EventChangeWeapon chWeaponEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventChangeWeapon ChWeaponEvent {
      get { return chWeaponEvent_; }
      set {
        chWeaponEvent_ = value;
      }
    }

    /// <summary>Field number for the "itemSpawnEvent" field.</summary>
    public const int ItemSpawnEventFieldNumber = 120;
    private global::Server2N.EventItemSpawn itemSpawnEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventItemSpawn ItemSpawnEvent {
      get { return itemSpawnEvent_; }
      set {
        itemSpawnEvent_ = value;
      }
    }

    /// <summary>Field number for the "itemGetEvent" field.</summary>
    public const int ItemGetEventFieldNumber = 121;
    private global::Server2N.EventItemGet itemGetEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventItemGet ItemGetEvent {
      get { return itemGetEvent_; }
      set {
        itemGetEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActType != other.ActType) return false;
      if (!object.Equals(MoveEvent, other.MoveEvent)) return false;
      if (!object.Equals(StopEvent, other.StopEvent)) return false;
      if (!object.Equals(JumpEvent, other.JumpEvent)) return false;
      if (!object.Equals(ShootEvent, other.ShootEvent)) return false;
      if (!object.Equals(HitEvent, other.HitEvent)) return false;
      if (!object.Equals(SpawnEvent, other.SpawnEvent)) return false;
      if (!object.Equals(SyncEvent, other.SyncEvent)) return false;
      if (!object.Equals(DeathEvent, other.DeathEvent)) return false;
      if (!object.Equals(ChWeaponEvent, other.ChWeaponEvent)) return false;
      if (!object.Equals(ItemSpawnEvent, other.ItemSpawnEvent)) return false;
      if (!object.Equals(ItemGetEvent, other.ItemGetEvent)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (moveEvent_ != null) hash ^= MoveEvent.GetHashCode();
      if (stopEvent_ != null) hash ^= StopEvent.GetHashCode();
      if (jumpEvent_ != null) hash ^= JumpEvent.GetHashCode();
      if (shootEvent_ != null) hash ^= ShootEvent.GetHashCode();
      if (hitEvent_ != null) hash ^= HitEvent.GetHashCode();
      if (spawnEvent_ != null) hash ^= SpawnEvent.GetHashCode();
      if (syncEvent_ != null) hash ^= SyncEvent.GetHashCode();
      if (deathEvent_ != null) hash ^= DeathEvent.GetHashCode();
      if (chWeaponEvent_ != null) hash ^= ChWeaponEvent.GetHashCode();
      if (itemSpawnEvent_ != null) hash ^= ItemSpawnEvent.GetHashCode();
      if (itemGetEvent_ != null) hash ^= ItemGetEvent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActType != 0) {
        output.WriteRawTag(240, 6);
        output.WriteEnum((int) ActType);
      }
      if (moveEvent_ != null) {
        output.WriteRawTag(250, 6);
        output.WriteMessage(MoveEvent);
      }
      if (stopEvent_ != null) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(StopEvent);
      }
      if (jumpEvent_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(JumpEvent);
      }
      if (shootEvent_ != null) {
        output.WriteRawTag(146, 7);
        output.WriteMessage(ShootEvent);
      }
      if (hitEvent_ != null) {
        output.WriteRawTag(154, 7);
        output.WriteMessage(HitEvent);
      }
      if (spawnEvent_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(SpawnEvent);
      }
      if (syncEvent_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(SyncEvent);
      }
      if (deathEvent_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(DeathEvent);
      }
      if (chWeaponEvent_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(ChWeaponEvent);
      }
      if (itemSpawnEvent_ != null) {
        output.WriteRawTag(194, 7);
        output.WriteMessage(ItemSpawnEvent);
      }
      if (itemGetEvent_ != null) {
        output.WriteRawTag(202, 7);
        output.WriteMessage(ItemGetEvent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (moveEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MoveEvent);
      }
      if (stopEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StopEvent);
      }
      if (jumpEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(JumpEvent);
      }
      if (shootEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShootEvent);
      }
      if (hitEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HitEvent);
      }
      if (spawnEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpawnEvent);
      }
      if (syncEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SyncEvent);
      }
      if (deathEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeathEvent);
      }
      if (chWeaponEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChWeaponEvent);
      }
      if (itemSpawnEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ItemSpawnEvent);
      }
      if (itemGetEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ItemGetEvent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserEvent other) {
      if (other == null) {
        return;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.moveEvent_ != null) {
        if (moveEvent_ == null) {
          moveEvent_ = new global::Server2N.EventMove();
        }
        MoveEvent.MergeFrom(other.MoveEvent);
      }
      if (other.stopEvent_ != null) {
        if (stopEvent_ == null) {
          stopEvent_ = new global::Server2N.EventStop();
        }
        StopEvent.MergeFrom(other.StopEvent);
      }
      if (other.jumpEvent_ != null) {
        if (jumpEvent_ == null) {
          jumpEvent_ = new global::Server2N.EventJump();
        }
        JumpEvent.MergeFrom(other.JumpEvent);
      }
      if (other.shootEvent_ != null) {
        if (shootEvent_ == null) {
          shootEvent_ = new global::Server2N.EventShoot();
        }
        ShootEvent.MergeFrom(other.ShootEvent);
      }
      if (other.hitEvent_ != null) {
        if (hitEvent_ == null) {
          hitEvent_ = new global::Server2N.EventHit();
        }
        HitEvent.MergeFrom(other.HitEvent);
      }
      if (other.spawnEvent_ != null) {
        if (spawnEvent_ == null) {
          spawnEvent_ = new global::Server2N.EventSpawn();
        }
        SpawnEvent.MergeFrom(other.SpawnEvent);
      }
      if (other.syncEvent_ != null) {
        if (syncEvent_ == null) {
          syncEvent_ = new global::Server2N.EventUserSync();
        }
        SyncEvent.MergeFrom(other.SyncEvent);
      }
      if (other.deathEvent_ != null) {
        if (deathEvent_ == null) {
          deathEvent_ = new global::Server2N.EventDeath();
        }
        DeathEvent.MergeFrom(other.DeathEvent);
      }
      if (other.chWeaponEvent_ != null) {
        if (chWeaponEvent_ == null) {
          chWeaponEvent_ = new global::Server2N.EventChangeWeapon();
        }
        ChWeaponEvent.MergeFrom(other.ChWeaponEvent);
      }
      if (other.itemSpawnEvent_ != null) {
        if (itemSpawnEvent_ == null) {
          itemSpawnEvent_ = new global::Server2N.EventItemSpawn();
        }
        ItemSpawnEvent.MergeFrom(other.ItemSpawnEvent);
      }
      if (other.itemGetEvent_ != null) {
        if (itemGetEvent_ == null) {
          itemGetEvent_ = new global::Server2N.EventItemGet();
        }
        ItemGetEvent.MergeFrom(other.ItemGetEvent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 880: {
            actType_ = (global::Server2N.UserEvent.Types.action) input.ReadEnum();
            break;
          }
          case 890: {
            if (moveEvent_ == null) {
              moveEvent_ = new global::Server2N.EventMove();
            }
            input.ReadMessage(moveEvent_);
            break;
          }
          case 898: {
            if (stopEvent_ == null) {
              stopEvent_ = new global::Server2N.EventStop();
            }
            input.ReadMessage(stopEvent_);
            break;
          }
          case 906: {
            if (jumpEvent_ == null) {
              jumpEvent_ = new global::Server2N.EventJump();
            }
            input.ReadMessage(jumpEvent_);
            break;
          }
          case 914: {
            if (shootEvent_ == null) {
              shootEvent_ = new global::Server2N.EventShoot();
            }
            input.ReadMessage(shootEvent_);
            break;
          }
          case 922: {
            if (hitEvent_ == null) {
              hitEvent_ = new global::Server2N.EventHit();
            }
            input.ReadMessage(hitEvent_);
            break;
          }
          case 930: {
            if (spawnEvent_ == null) {
              spawnEvent_ = new global::Server2N.EventSpawn();
            }
            input.ReadMessage(spawnEvent_);
            break;
          }
          case 938: {
            if (syncEvent_ == null) {
              syncEvent_ = new global::Server2N.EventUserSync();
            }
            input.ReadMessage(syncEvent_);
            break;
          }
          case 946: {
            if (deathEvent_ == null) {
              deathEvent_ = new global::Server2N.EventDeath();
            }
            input.ReadMessage(deathEvent_);
            break;
          }
          case 954: {
            if (chWeaponEvent_ == null) {
              chWeaponEvent_ = new global::Server2N.EventChangeWeapon();
            }
            input.ReadMessage(chWeaponEvent_);
            break;
          }
          case 962: {
            if (itemSpawnEvent_ == null) {
              itemSpawnEvent_ = new global::Server2N.EventItemSpawn();
            }
            input.ReadMessage(itemSpawnEvent_);
            break;
          }
          case 970: {
            if (itemGetEvent_ == null) {
              itemGetEvent_ = new global::Server2N.EventItemGet();
            }
            input.ReadMessage(itemGetEvent_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum action {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("EventMove")] EventMove = 100,
        [pbr::OriginalName("EventStop")] EventStop = 101,
        [pbr::OriginalName("EventJump")] EventJump = 102,
        [pbr::OriginalName("EventShoot")] EventShoot = 103,
        [pbr::OriginalName("EventHit")] EventHit = 104,
        [pbr::OriginalName("EventSpawn")] EventSpawn = 105,
        [pbr::OriginalName("EventUserSync")] EventUserSync = 106,
        [pbr::OriginalName("EventDeath")] EventDeath = 107,
        [pbr::OriginalName("EventBullet")] EventBullet = 108,
        [pbr::OriginalName("EventChangeWeapon")] EventChangeWeapon = 109,
      }

    }
    #endregion

  }

  public sealed partial class PacketBody : pb::IMessage<PacketBody> {
    private static readonly pb::MessageParser<PacketBody> _parser = new pb::MessageParser<PacketBody>(() => new PacketBody());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacketBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBody(PacketBody other) : this() {
      msgType_ = other.msgType_;
      Connect = other.connect_ != null ? other.Connect.Clone() : null;
      Notice = other.notice_ != null ? other.Notice.Clone() : null;
      Event = other.event_ != null ? other.Event.Clone() : null;
      senderId_ = other.senderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBody Clone() {
      return new PacketBody(this);
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 10000;
    private global::Server2N.PacketBody.Types.messageType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.PacketBody.Types.messageType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "connect" field.</summary>
    public const int ConnectFieldNumber = 6;
    private global::Server2N.UserConnection connect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.UserConnection Connect {
      get { return connect_; }
      set {
        connect_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 10001;
    private global::Server2N.GlobalNotice notice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.GlobalNotice Notice {
      get { return notice_; }
      set {
        notice_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 7;
    private global::Server2N.GameEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.GameEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 8;
    private int senderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacketBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacketBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (!object.Equals(Connect, other.Connect)) return false;
      if (!object.Equals(Notice, other.Notice)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (SenderId != other.SenderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (connect_ != null) hash ^= Connect.GetHashCode();
      if (notice_ != null) hash ^= Notice.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (SenderId != 0) hash ^= SenderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (connect_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Connect);
      }
      if (event_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Event);
      }
      if (SenderId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SenderId);
      }
      if (MsgType != 0) {
        output.WriteRawTag(128, 241, 4);
        output.WriteEnum((int) MsgType);
      }
      if (notice_ != null) {
        output.WriteRawTag(138, 241, 4);
        output.WriteMessage(Notice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType != 0) {
        size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (connect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connect);
      }
      if (notice_ != null) {
        size += 3 + pb::CodedOutputStream.ComputeMessageSize(Notice);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (SenderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SenderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacketBody other) {
      if (other == null) {
        return;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.connect_ != null) {
        if (connect_ == null) {
          connect_ = new global::Server2N.UserConnection();
        }
        Connect.MergeFrom(other.Connect);
      }
      if (other.notice_ != null) {
        if (notice_ == null) {
          notice_ = new global::Server2N.GlobalNotice();
        }
        Notice.MergeFrom(other.Notice);
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::Server2N.GameEvent();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.SenderId != 0) {
        SenderId = other.SenderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 50: {
            if (connect_ == null) {
              connect_ = new global::Server2N.UserConnection();
            }
            input.ReadMessage(connect_);
            break;
          }
          case 58: {
            if (event_ == null) {
              event_ = new global::Server2N.GameEvent();
            }
            input.ReadMessage(event_);
            break;
          }
          case 64: {
            SenderId = input.ReadInt32();
            break;
          }
          case 80000: {
            msgType_ = (global::Server2N.PacketBody.Types.messageType) input.ReadEnum();
            break;
          }
          case 80010: {
            if (notice_ == null) {
              notice_ = new global::Server2N.GlobalNotice();
            }
            input.ReadMessage(notice_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PacketBody message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum messageType {
        [pbr::OriginalName("GameEvent")] GameEvent = 0,
        [pbr::OriginalName("UserConnection")] UserConnection = 10000,
        [pbr::OriginalName("GlobalNotice")] GlobalNotice = 10001,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
