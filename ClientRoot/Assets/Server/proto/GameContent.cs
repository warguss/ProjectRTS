// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameContent.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Server2N {

  /// <summary>Holder for reflection information generated from gameContent.proto</summary>
  public static partial class GameContentReflection {

    #region Descriptor
    /// <summary>File descriptor for gameContent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameContentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFnYW1lQ29udGVudC5wcm90bxIIc2VydmVyMk4iqwEKDEdsb2JhbE5vdGlj",
            "ZRIzCghub3RpVHlwZRgBIAEoDjIhLnNlcnZlcjJOLkdsb2JhbE5vdGljZS5O",
            "b3RpY2VJbmZvEg4KBm5vdGljZRgCIAEoCRIRCglwZXJmb3JtZXIYAyABKAUS",
            "DgoGdmljdGltGAQgAygFIjMKCk5vdGljZUluZm8SCwoHTm90aGluZxAAEgwK",
            "CEtpbGxJbmZvEAESCgoGTm90aWNlEAIi9QEKDlVzZXJDb25uZWN0aW9uEhMK",
            "C2Nvbm5lY3RvcklkGAEgAygFEhAKCGtpbGxJbmZvGAIgAygFEhEKCWRlYXRo",
            "SW5mbxgDIAMoBRIQCghuaWNrbmFtZRgEIAMoCRI4Cgdjb25UeXBlGAUgASgO",
            "Micuc2VydmVyMk4uVXNlckNvbm5lY3Rpb24uQ29ubmVjdGlvblR5cGUiXQoO",
            "Q29ubmVjdGlvblR5cGUSCwoHTm90aGluZxAAEgsKB0Nvbm5lY3QQARIOCgpU",
            "cnlDb25uZWN0EAISEQoNQWNjZXB0Q29ubmVjdBADEg4KCkRpc0Nvbm5lY3QQ",
            "BCJ5CglFdmVudE1vdmUSKwoEdHlwZRgFIAEoDjIdLnNlcnZlcjJOLkV2ZW50",
            "TW92ZS5EaXJlY3Rpb24iPwoJRGlyZWN0aW9uEgsKB05vdGhpbmcQABIICgRM",
            "ZWZ0EAESCQoFUmlnaHQQAhIICgREb3duEAMSBgoCVXAQBCILCglFdmVudFN0",
            "b3AiCwoJRXZlbnRKdW1wIlAKCkV2ZW50U2hvb3QSDQoFYW5nbGUYASABKAIS",
            "DgoGZGFtYWdlGAIgASgCEg4KBmltcGFjdBgDIAEoBRITCgtpbXBhY3RBbmds",
            "ZRgEIAEoBSJRCghFdmVudEhpdBIQCghhdHRhY2tlchgBIAEoBRIOCgZkYW1h",
            "Z2UYAiABKAISDgoGaW1wYWN0GAMgASgFEhMKC2ltcGFjdEFuZ2xlGAQgASgF",
            "IgwKCkV2ZW50U3Bhd24iDwoNRXZlbnRVc2VyU3luYyIfCgpFdmVudERlYXRo",
            "EhEKCXRyaWdnZXJJZBgBIAEoBSK6BQoJR2FtZUV2ZW50EiYKCW1vdmVFdmVu",
            "dBhtIAEoCzITLnNlcnZlcjJOLkV2ZW50TW92ZRImCglzdG9wRXZlbnQYbiAB",
            "KAsyEy5zZXJ2ZXIyTi5FdmVudFN0b3ASJgoJanVtcEV2ZW50GG8gASgLMhMu",
            "c2VydmVyMk4uRXZlbnRKdW1wEigKCnNob290RXZlbnQYcCABKAsyFC5zZXJ2",
            "ZXIyTi5FdmVudFNob290EiQKCGhpdEV2ZW50GHEgASgLMhIuc2VydmVyMk4u",
            "RXZlbnRIaXQSKAoKc3Bhd25FdmVudBhyIAEoCzIULnNlcnZlcjJOLkV2ZW50",
            "U3Bhd24SKgoJc3luY0V2ZW50GHMgASgLMhcuc2VydmVyMk4uRXZlbnRVc2Vy",
            "U3luYxIoCgpkZWF0aEV2ZW50GHQgASgLMhQuc2VydmVyMk4uRXZlbnREZWF0",
            "aBIrCgdhY3RUeXBlGAEgASgOMhouc2VydmVyMk4uR2FtZUV2ZW50LmFjdGlv",
            "bhIWCg5hY3Rpb25Qcm9wZXJ0eRgFIAEoBRIWCg5FdmVudFBvc2l0aW9uWBgG",
            "IAEoAhIWCg5FdmVudFBvc2l0aW9uWRgHIAEoAhIRCglWZWxvY2l0eVgYCCAB",
            "KAISEQoJVmVsb2NpdHlZGAkgASgCEhEKCWludm9rZXJJZBgKIAMoBRIQCghz",
            "ZWN0b3JObxgLIAEoBSKkAQoGYWN0aW9uEgsKB05vdGhpbmcQABINCglFdmVu",
            "dE1vdmUQZBINCglFdmVudFN0b3AQZRINCglFdmVudEp1bXAQZhIOCgpFdmVu",
            "dFNob290EGcSDAoIRXZlbnRIaXQQaBIOCgpFdmVudFNwYXduEGkSEQoNRXZl",
            "bnRVc2VyU3luYxBqEg4KCkV2ZW50RGVhdGgQaxIPCgtFdmVudEJ1bGxldBBs",
            "IpACCgpQYWNrZXRCb2R5EjIKB21zZ1R5cGUYkE4gASgOMiAuc2VydmVyMk4u",
            "UGFja2V0Qm9keS5tZXNzYWdlVHlwZRIpCgdjb25uZWN0GAYgASgLMhguc2Vy",
            "dmVyMk4uVXNlckNvbm5lY3Rpb24SJwoGbm90aWNlGJFOIAEoCzIWLnNlcnZl",
            "cjJOLkdsb2JhbE5vdGljZRIiCgVldmVudBgHIAEoCzITLnNlcnZlcjJOLkdh",
            "bWVFdmVudBIQCghzZW5kZXJJZBgIIAEoBSJECgttZXNzYWdlVHlwZRINCglH",
            "YW1lRXZlbnQQABITCg5Vc2VyQ29ubmVjdGlvbhCQThIRCgxHbG9iYWxOb3Rp",
            "Y2UQkU5iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.GlobalNotice), global::Server2N.GlobalNotice.Parser, new[]{ "NotiType", "Notice", "Performer", "Victim" }, null, new[]{ typeof(global::Server2N.GlobalNotice.Types.NoticeInfo) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.UserConnection), global::Server2N.UserConnection.Parser, new[]{ "ConnectorId", "KillInfo", "DeathInfo", "Nickname", "ConType" }, null, new[]{ typeof(global::Server2N.UserConnection.Types.ConnectionType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventMove), global::Server2N.EventMove.Parser, new[]{ "Type" }, null, new[]{ typeof(global::Server2N.EventMove.Types.Direction) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventStop), global::Server2N.EventStop.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventJump), global::Server2N.EventJump.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventShoot), global::Server2N.EventShoot.Parser, new[]{ "Angle", "Damage", "Impact", "ImpactAngle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventHit), global::Server2N.EventHit.Parser, new[]{ "Attacker", "Damage", "Impact", "ImpactAngle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventSpawn), global::Server2N.EventSpawn.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventUserSync), global::Server2N.EventUserSync.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.EventDeath), global::Server2N.EventDeath.Parser, new[]{ "TriggerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.GameEvent), global::Server2N.GameEvent.Parser, new[]{ "MoveEvent", "StopEvent", "JumpEvent", "ShootEvent", "HitEvent", "SpawnEvent", "SyncEvent", "DeathEvent", "ActType", "ActionProperty", "EventPositionX", "EventPositionY", "VelocityX", "VelocityY", "InvokerId", "SectorNo" }, null, new[]{ typeof(global::Server2N.GameEvent.Types.action) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.PacketBody), global::Server2N.PacketBody.Parser, new[]{ "MsgType", "Connect", "Notice", "Event", "SenderId" }, null, new[]{ typeof(global::Server2N.PacketBody.Types.messageType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GlobalNotice : pb::IMessage<GlobalNotice> {
    private static readonly pb::MessageParser<GlobalNotice> _parser = new pb::MessageParser<GlobalNotice>(() => new GlobalNotice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalNotice(GlobalNotice other) : this() {
      notiType_ = other.notiType_;
      notice_ = other.notice_;
      performer_ = other.performer_;
      victim_ = other.victim_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalNotice Clone() {
      return new GlobalNotice(this);
    }

    /// <summary>Field number for the "notiType" field.</summary>
    public const int NotiTypeFieldNumber = 1;
    private global::Server2N.GlobalNotice.Types.NoticeInfo notiType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.GlobalNotice.Types.NoticeInfo NotiType {
      get { return notiType_; }
      set {
        notiType_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 2;
    private string notice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "performer" field.</summary>
    public const int PerformerFieldNumber = 3;
    private int performer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Performer {
      get { return performer_; }
      set {
        performer_ = value;
      }
    }

    /// <summary>Field number for the "victim" field.</summary>
    public const int VictimFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_victim_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> victim_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Victim {
      get { return victim_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NotiType != other.NotiType) return false;
      if (Notice != other.Notice) return false;
      if (Performer != other.Performer) return false;
      if(!victim_.Equals(other.victim_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NotiType != 0) hash ^= NotiType.GetHashCode();
      if (Notice.Length != 0) hash ^= Notice.GetHashCode();
      if (Performer != 0) hash ^= Performer.GetHashCode();
      hash ^= victim_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NotiType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NotiType);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Notice);
      }
      if (Performer != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Performer);
      }
      victim_.WriteTo(output, _repeated_victim_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NotiType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NotiType);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      if (Performer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Performer);
      }
      size += victim_.CalculateSize(_repeated_victim_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalNotice other) {
      if (other == null) {
        return;
      }
      if (other.NotiType != 0) {
        NotiType = other.NotiType;
      }
      if (other.Notice.Length != 0) {
        Notice = other.Notice;
      }
      if (other.Performer != 0) {
        Performer = other.Performer;
      }
      victim_.Add(other.victim_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            notiType_ = (global::Server2N.GlobalNotice.Types.NoticeInfo) input.ReadEnum();
            break;
          }
          case 18: {
            Notice = input.ReadString();
            break;
          }
          case 24: {
            Performer = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            victim_.AddEntriesFrom(input, _repeated_victim_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GlobalNotice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NoticeInfo {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("KillInfo")] KillInfo = 1,
        [pbr::OriginalName("Notice")] Notice = 2,
      }

    }
    #endregion

  }

  public sealed partial class UserConnection : pb::IMessage<UserConnection> {
    private static readonly pb::MessageParser<UserConnection> _parser = new pb::MessageParser<UserConnection>(() => new UserConnection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserConnection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnection(UserConnection other) : this() {
      connectorId_ = other.connectorId_.Clone();
      killInfo_ = other.killInfo_.Clone();
      deathInfo_ = other.deathInfo_.Clone();
      nickname_ = other.nickname_.Clone();
      conType_ = other.conType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnection Clone() {
      return new UserConnection(this);
    }

    /// <summary>Field number for the "connectorId" field.</summary>
    public const int ConnectorIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_connectorId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> connectorId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ConnectorId {
      get { return connectorId_; }
    }

    /// <summary>Field number for the "killInfo" field.</summary>
    public const int KillInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_killInfo_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> killInfo_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> KillInfo {
      get { return killInfo_; }
    }

    /// <summary>Field number for the "deathInfo" field.</summary>
    public const int DeathInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_deathInfo_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> deathInfo_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DeathInfo {
      get { return deathInfo_; }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_nickname_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> nickname_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Nickname {
      get { return nickname_; }
    }

    /// <summary>Field number for the "conType" field.</summary>
    public const int ConTypeFieldNumber = 5;
    private global::Server2N.UserConnection.Types.ConnectionType conType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.UserConnection.Types.ConnectionType ConType {
      get { return conType_; }
      set {
        conType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserConnection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserConnection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!connectorId_.Equals(other.connectorId_)) return false;
      if(!killInfo_.Equals(other.killInfo_)) return false;
      if(!deathInfo_.Equals(other.deathInfo_)) return false;
      if(!nickname_.Equals(other.nickname_)) return false;
      if (ConType != other.ConType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= connectorId_.GetHashCode();
      hash ^= killInfo_.GetHashCode();
      hash ^= deathInfo_.GetHashCode();
      hash ^= nickname_.GetHashCode();
      if (ConType != 0) hash ^= ConType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      connectorId_.WriteTo(output, _repeated_connectorId_codec);
      killInfo_.WriteTo(output, _repeated_killInfo_codec);
      deathInfo_.WriteTo(output, _repeated_deathInfo_codec);
      nickname_.WriteTo(output, _repeated_nickname_codec);
      if (ConType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ConType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += connectorId_.CalculateSize(_repeated_connectorId_codec);
      size += killInfo_.CalculateSize(_repeated_killInfo_codec);
      size += deathInfo_.CalculateSize(_repeated_deathInfo_codec);
      size += nickname_.CalculateSize(_repeated_nickname_codec);
      if (ConType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserConnection other) {
      if (other == null) {
        return;
      }
      connectorId_.Add(other.connectorId_);
      killInfo_.Add(other.killInfo_);
      deathInfo_.Add(other.deathInfo_);
      nickname_.Add(other.nickname_);
      if (other.ConType != 0) {
        ConType = other.ConType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            connectorId_.AddEntriesFrom(input, _repeated_connectorId_codec);
            break;
          }
          case 18:
          case 16: {
            killInfo_.AddEntriesFrom(input, _repeated_killInfo_codec);
            break;
          }
          case 26:
          case 24: {
            deathInfo_.AddEntriesFrom(input, _repeated_deathInfo_codec);
            break;
          }
          case 34: {
            nickname_.AddEntriesFrom(input, _repeated_nickname_codec);
            break;
          }
          case 40: {
            conType_ = (global::Server2N.UserConnection.Types.ConnectionType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserConnection message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ConnectionType {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("Connect")] Connect = 1,
        [pbr::OriginalName("TryConnect")] TryConnect = 2,
        [pbr::OriginalName("AcceptConnect")] AcceptConnect = 3,
        [pbr::OriginalName("DisConnect")] DisConnect = 4,
      }

    }
    #endregion

  }

  public sealed partial class EventMove : pb::IMessage<EventMove> {
    private static readonly pb::MessageParser<EventMove> _parser = new pb::MessageParser<EventMove>(() => new EventMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMove(EventMove other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMove Clone() {
      return new EventMove(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Server2N.EventMove.Types.Direction type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventMove.Types.Direction Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMove other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 40: {
            type_ = (global::Server2N.EventMove.Types.Direction) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EventMove message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Direction {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("Left")] Left = 1,
        [pbr::OriginalName("Right")] Right = 2,
        [pbr::OriginalName("Down")] Down = 3,
        [pbr::OriginalName("Up")] Up = 4,
      }

    }
    #endregion

  }

  public sealed partial class EventStop : pb::IMessage<EventStop> {
    private static readonly pb::MessageParser<EventStop> _parser = new pb::MessageParser<EventStop>(() => new EventStop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventStop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStop(EventStop other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStop Clone() {
      return new EventStop(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventStop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventStop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventStop other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class EventJump : pb::IMessage<EventJump> {
    private static readonly pb::MessageParser<EventJump> _parser = new pb::MessageParser<EventJump>(() => new EventJump());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventJump> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventJump() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventJump(EventJump other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventJump Clone() {
      return new EventJump(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventJump);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventJump other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventJump other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class EventShoot : pb::IMessage<EventShoot> {
    private static readonly pb::MessageParser<EventShoot> _parser = new pb::MessageParser<EventShoot>(() => new EventShoot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventShoot(EventShoot other) : this() {
      angle_ = other.angle_;
      damage_ = other.damage_;
      impact_ = other.impact_;
      impactAngle_ = other.impactAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventShoot Clone() {
      return new EventShoot(this);
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 1;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 2;
    private float damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "impact" field.</summary>
    public const int ImpactFieldNumber = 3;
    private int impact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Impact {
      get { return impact_; }
      set {
        impact_ = value;
      }
    }

    /// <summary>Field number for the "impactAngle" field.</summary>
    public const int ImpactAngleFieldNumber = 4;
    private int impactAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImpactAngle {
      get { return impactAngle_; }
      set {
        impactAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Damage, other.Damage)) return false;
      if (Impact != other.Impact) return false;
      if (ImpactAngle != other.ImpactAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (Damage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Damage);
      if (Impact != 0) hash ^= Impact.GetHashCode();
      if (ImpactAngle != 0) hash ^= ImpactAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Angle != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Angle);
      }
      if (Damage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Damage);
      }
      if (Impact != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Impact);
      }
      if (ImpactAngle != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ImpactAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Damage != 0F) {
        size += 1 + 4;
      }
      if (Impact != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Impact);
      }
      if (ImpactAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactAngle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventShoot other) {
      if (other == null) {
        return;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Damage != 0F) {
        Damage = other.Damage;
      }
      if (other.Impact != 0) {
        Impact = other.Impact;
      }
      if (other.ImpactAngle != 0) {
        ImpactAngle = other.ImpactAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Angle = input.ReadFloat();
            break;
          }
          case 21: {
            Damage = input.ReadFloat();
            break;
          }
          case 24: {
            Impact = input.ReadInt32();
            break;
          }
          case 32: {
            ImpactAngle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventHit : pb::IMessage<EventHit> {
    private static readonly pb::MessageParser<EventHit> _parser = new pb::MessageParser<EventHit>(() => new EventHit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHit(EventHit other) : this() {
      attacker_ = other.attacker_;
      damage_ = other.damage_;
      impact_ = other.impact_;
      impactAngle_ = other.impactAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHit Clone() {
      return new EventHit(this);
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 1;
    private int attacker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attacker {
      get { return attacker_; }
      set {
        attacker_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 2;
    private float damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "impact" field.</summary>
    public const int ImpactFieldNumber = 3;
    private int impact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Impact {
      get { return impact_; }
      set {
        impact_ = value;
      }
    }

    /// <summary>Field number for the "impactAngle" field.</summary>
    public const int ImpactAngleFieldNumber = 4;
    private int impactAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImpactAngle {
      get { return impactAngle_; }
      set {
        impactAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Attacker != other.Attacker) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Damage, other.Damage)) return false;
      if (Impact != other.Impact) return false;
      if (ImpactAngle != other.ImpactAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Attacker != 0) hash ^= Attacker.GetHashCode();
      if (Damage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Damage);
      if (Impact != 0) hash ^= Impact.GetHashCode();
      if (ImpactAngle != 0) hash ^= ImpactAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Attacker != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Attacker);
      }
      if (Damage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Damage);
      }
      if (Impact != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Impact);
      }
      if (ImpactAngle != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ImpactAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Attacker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attacker);
      }
      if (Damage != 0F) {
        size += 1 + 4;
      }
      if (Impact != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Impact);
      }
      if (ImpactAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactAngle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventHit other) {
      if (other == null) {
        return;
      }
      if (other.Attacker != 0) {
        Attacker = other.Attacker;
      }
      if (other.Damage != 0F) {
        Damage = other.Damage;
      }
      if (other.Impact != 0) {
        Impact = other.Impact;
      }
      if (other.ImpactAngle != 0) {
        ImpactAngle = other.ImpactAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Attacker = input.ReadInt32();
            break;
          }
          case 21: {
            Damage = input.ReadFloat();
            break;
          }
          case 24: {
            Impact = input.ReadInt32();
            break;
          }
          case 32: {
            ImpactAngle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventSpawn : pb::IMessage<EventSpawn> {
    private static readonly pb::MessageParser<EventSpawn> _parser = new pb::MessageParser<EventSpawn>(() => new EventSpawn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSpawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSpawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSpawn(EventSpawn other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSpawn Clone() {
      return new EventSpawn(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSpawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSpawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSpawn other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class EventUserSync : pb::IMessage<EventUserSync> {
    private static readonly pb::MessageParser<EventUserSync> _parser = new pb::MessageParser<EventUserSync>(() => new EventUserSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventUserSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventUserSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventUserSync(EventUserSync other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventUserSync Clone() {
      return new EventUserSync(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventUserSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventUserSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventUserSync other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class EventDeath : pb::IMessage<EventDeath> {
    private static readonly pb::MessageParser<EventDeath> _parser = new pb::MessageParser<EventDeath>(() => new EventDeath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDeath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDeath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDeath(EventDeath other) : this() {
      triggerId_ = other.triggerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDeath Clone() {
      return new EventDeath(this);
    }

    /// <summary>Field number for the "triggerId" field.</summary>
    public const int TriggerIdFieldNumber = 1;
    private int triggerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerId {
      get { return triggerId_; }
      set {
        triggerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDeath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDeath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TriggerId != other.TriggerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TriggerId != 0) hash ^= TriggerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TriggerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TriggerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDeath other) {
      if (other == null) {
        return;
      }
      if (other.TriggerId != 0) {
        TriggerId = other.TriggerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TriggerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameEvent : pb::IMessage<GameEvent> {
    private static readonly pb::MessageParser<GameEvent> _parser = new pb::MessageParser<GameEvent>(() => new GameEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent(GameEvent other) : this() {
      MoveEvent = other.moveEvent_ != null ? other.MoveEvent.Clone() : null;
      StopEvent = other.stopEvent_ != null ? other.StopEvent.Clone() : null;
      JumpEvent = other.jumpEvent_ != null ? other.JumpEvent.Clone() : null;
      ShootEvent = other.shootEvent_ != null ? other.ShootEvent.Clone() : null;
      HitEvent = other.hitEvent_ != null ? other.HitEvent.Clone() : null;
      SpawnEvent = other.spawnEvent_ != null ? other.SpawnEvent.Clone() : null;
      SyncEvent = other.syncEvent_ != null ? other.SyncEvent.Clone() : null;
      DeathEvent = other.deathEvent_ != null ? other.DeathEvent.Clone() : null;
      actType_ = other.actType_;
      actionProperty_ = other.actionProperty_;
      eventPositionX_ = other.eventPositionX_;
      eventPositionY_ = other.eventPositionY_;
      velocityX_ = other.velocityX_;
      velocityY_ = other.velocityY_;
      invokerId_ = other.invokerId_.Clone();
      sectorNo_ = other.sectorNo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent Clone() {
      return new GameEvent(this);
    }

    /// <summary>Field number for the "moveEvent" field.</summary>
    public const int MoveEventFieldNumber = 109;
    private global::Server2N.EventMove moveEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventMove MoveEvent {
      get { return moveEvent_; }
      set {
        moveEvent_ = value;
      }
    }

    /// <summary>Field number for the "stopEvent" field.</summary>
    public const int StopEventFieldNumber = 110;
    private global::Server2N.EventStop stopEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventStop StopEvent {
      get { return stopEvent_; }
      set {
        stopEvent_ = value;
      }
    }

    /// <summary>Field number for the "jumpEvent" field.</summary>
    public const int JumpEventFieldNumber = 111;
    private global::Server2N.EventJump jumpEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventJump JumpEvent {
      get { return jumpEvent_; }
      set {
        jumpEvent_ = value;
      }
    }

    /// <summary>Field number for the "shootEvent" field.</summary>
    public const int ShootEventFieldNumber = 112;
    private global::Server2N.EventShoot shootEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventShoot ShootEvent {
      get { return shootEvent_; }
      set {
        shootEvent_ = value;
      }
    }

    /// <summary>Field number for the "hitEvent" field.</summary>
    public const int HitEventFieldNumber = 113;
    private global::Server2N.EventHit hitEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventHit HitEvent {
      get { return hitEvent_; }
      set {
        hitEvent_ = value;
      }
    }

    /// <summary>Field number for the "spawnEvent" field.</summary>
    public const int SpawnEventFieldNumber = 114;
    private global::Server2N.EventSpawn spawnEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventSpawn SpawnEvent {
      get { return spawnEvent_; }
      set {
        spawnEvent_ = value;
      }
    }

    /// <summary>Field number for the "syncEvent" field.</summary>
    public const int SyncEventFieldNumber = 115;
    private global::Server2N.EventUserSync syncEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventUserSync SyncEvent {
      get { return syncEvent_; }
      set {
        syncEvent_ = value;
      }
    }

    /// <summary>Field number for the "deathEvent" field.</summary>
    public const int DeathEventFieldNumber = 116;
    private global::Server2N.EventDeath deathEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.EventDeath DeathEvent {
      get { return deathEvent_; }
      set {
        deathEvent_ = value;
      }
    }

    /// <summary>Field number for the "actType" field.</summary>
    public const int ActTypeFieldNumber = 1;
    private global::Server2N.GameEvent.Types.action actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.GameEvent.Types.action ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "actionProperty" field.</summary>
    public const int ActionPropertyFieldNumber = 5;
    private int actionProperty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionProperty {
      get { return actionProperty_; }
      set {
        actionProperty_ = value;
      }
    }

    /// <summary>Field number for the "EventPositionX" field.</summary>
    public const int EventPositionXFieldNumber = 6;
    private float eventPositionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EventPositionX {
      get { return eventPositionX_; }
      set {
        eventPositionX_ = value;
      }
    }

    /// <summary>Field number for the "EventPositionY" field.</summary>
    public const int EventPositionYFieldNumber = 7;
    private float eventPositionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EventPositionY {
      get { return eventPositionY_; }
      set {
        eventPositionY_ = value;
      }
    }

    /// <summary>Field number for the "VelocityX" field.</summary>
    public const int VelocityXFieldNumber = 8;
    private float velocityX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    /// <summary>Field number for the "VelocityY" field.</summary>
    public const int VelocityYFieldNumber = 9;
    private float velocityY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    /// <summary>Field number for the "invokerId" field.</summary>
    public const int InvokerIdFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_invokerId_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> invokerId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InvokerId {
      get { return invokerId_; }
    }

    /// <summary>Field number for the "sectorNo" field.</summary>
    public const int SectorNoFieldNumber = 11;
    private int sectorNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectorNo {
      get { return sectorNo_; }
      set {
        sectorNo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MoveEvent, other.MoveEvent)) return false;
      if (!object.Equals(StopEvent, other.StopEvent)) return false;
      if (!object.Equals(JumpEvent, other.JumpEvent)) return false;
      if (!object.Equals(ShootEvent, other.ShootEvent)) return false;
      if (!object.Equals(HitEvent, other.HitEvent)) return false;
      if (!object.Equals(SpawnEvent, other.SpawnEvent)) return false;
      if (!object.Equals(SyncEvent, other.SyncEvent)) return false;
      if (!object.Equals(DeathEvent, other.DeathEvent)) return false;
      if (ActType != other.ActType) return false;
      if (ActionProperty != other.ActionProperty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EventPositionX, other.EventPositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EventPositionY, other.EventPositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelocityX, other.VelocityX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelocityY, other.VelocityY)) return false;
      if(!invokerId_.Equals(other.invokerId_)) return false;
      if (SectorNo != other.SectorNo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (moveEvent_ != null) hash ^= MoveEvent.GetHashCode();
      if (stopEvent_ != null) hash ^= StopEvent.GetHashCode();
      if (jumpEvent_ != null) hash ^= JumpEvent.GetHashCode();
      if (shootEvent_ != null) hash ^= ShootEvent.GetHashCode();
      if (hitEvent_ != null) hash ^= HitEvent.GetHashCode();
      if (spawnEvent_ != null) hash ^= SpawnEvent.GetHashCode();
      if (syncEvent_ != null) hash ^= SyncEvent.GetHashCode();
      if (deathEvent_ != null) hash ^= DeathEvent.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (ActionProperty != 0) hash ^= ActionProperty.GetHashCode();
      if (EventPositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EventPositionX);
      if (EventPositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EventPositionY);
      if (VelocityX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelocityX);
      if (VelocityY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelocityY);
      hash ^= invokerId_.GetHashCode();
      if (SectorNo != 0) hash ^= SectorNo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ActType);
      }
      if (ActionProperty != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActionProperty);
      }
      if (EventPositionX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(EventPositionX);
      }
      if (EventPositionY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(EventPositionY);
      }
      if (VelocityX != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(VelocityX);
      }
      if (VelocityY != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(VelocityY);
      }
      invokerId_.WriteTo(output, _repeated_invokerId_codec);
      if (SectorNo != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SectorNo);
      }
      if (moveEvent_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(MoveEvent);
      }
      if (stopEvent_ != null) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(StopEvent);
      }
      if (jumpEvent_ != null) {
        output.WriteRawTag(250, 6);
        output.WriteMessage(JumpEvent);
      }
      if (shootEvent_ != null) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(ShootEvent);
      }
      if (hitEvent_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(HitEvent);
      }
      if (spawnEvent_ != null) {
        output.WriteRawTag(146, 7);
        output.WriteMessage(SpawnEvent);
      }
      if (syncEvent_ != null) {
        output.WriteRawTag(154, 7);
        output.WriteMessage(SyncEvent);
      }
      if (deathEvent_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(DeathEvent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (moveEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MoveEvent);
      }
      if (stopEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StopEvent);
      }
      if (jumpEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(JumpEvent);
      }
      if (shootEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShootEvent);
      }
      if (hitEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HitEvent);
      }
      if (spawnEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpawnEvent);
      }
      if (syncEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SyncEvent);
      }
      if (deathEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeathEvent);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (ActionProperty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionProperty);
      }
      if (EventPositionX != 0F) {
        size += 1 + 4;
      }
      if (EventPositionY != 0F) {
        size += 1 + 4;
      }
      if (VelocityX != 0F) {
        size += 1 + 4;
      }
      if (VelocityY != 0F) {
        size += 1 + 4;
      }
      size += invokerId_.CalculateSize(_repeated_invokerId_codec);
      if (SectorNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectorNo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEvent other) {
      if (other == null) {
        return;
      }
      if (other.moveEvent_ != null) {
        if (moveEvent_ == null) {
          moveEvent_ = new global::Server2N.EventMove();
        }
        MoveEvent.MergeFrom(other.MoveEvent);
      }
      if (other.stopEvent_ != null) {
        if (stopEvent_ == null) {
          stopEvent_ = new global::Server2N.EventStop();
        }
        StopEvent.MergeFrom(other.StopEvent);
      }
      if (other.jumpEvent_ != null) {
        if (jumpEvent_ == null) {
          jumpEvent_ = new global::Server2N.EventJump();
        }
        JumpEvent.MergeFrom(other.JumpEvent);
      }
      if (other.shootEvent_ != null) {
        if (shootEvent_ == null) {
          shootEvent_ = new global::Server2N.EventShoot();
        }
        ShootEvent.MergeFrom(other.ShootEvent);
      }
      if (other.hitEvent_ != null) {
        if (hitEvent_ == null) {
          hitEvent_ = new global::Server2N.EventHit();
        }
        HitEvent.MergeFrom(other.HitEvent);
      }
      if (other.spawnEvent_ != null) {
        if (spawnEvent_ == null) {
          spawnEvent_ = new global::Server2N.EventSpawn();
        }
        SpawnEvent.MergeFrom(other.SpawnEvent);
      }
      if (other.syncEvent_ != null) {
        if (syncEvent_ == null) {
          syncEvent_ = new global::Server2N.EventUserSync();
        }
        SyncEvent.MergeFrom(other.SyncEvent);
      }
      if (other.deathEvent_ != null) {
        if (deathEvent_ == null) {
          deathEvent_ = new global::Server2N.EventDeath();
        }
        DeathEvent.MergeFrom(other.DeathEvent);
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.ActionProperty != 0) {
        ActionProperty = other.ActionProperty;
      }
      if (other.EventPositionX != 0F) {
        EventPositionX = other.EventPositionX;
      }
      if (other.EventPositionY != 0F) {
        EventPositionY = other.EventPositionY;
      }
      if (other.VelocityX != 0F) {
        VelocityX = other.VelocityX;
      }
      if (other.VelocityY != 0F) {
        VelocityY = other.VelocityY;
      }
      invokerId_.Add(other.invokerId_);
      if (other.SectorNo != 0) {
        SectorNo = other.SectorNo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            actType_ = (global::Server2N.GameEvent.Types.action) input.ReadEnum();
            break;
          }
          case 40: {
            ActionProperty = input.ReadInt32();
            break;
          }
          case 53: {
            EventPositionX = input.ReadFloat();
            break;
          }
          case 61: {
            EventPositionY = input.ReadFloat();
            break;
          }
          case 69: {
            VelocityX = input.ReadFloat();
            break;
          }
          case 77: {
            VelocityY = input.ReadFloat();
            break;
          }
          case 82:
          case 80: {
            invokerId_.AddEntriesFrom(input, _repeated_invokerId_codec);
            break;
          }
          case 88: {
            SectorNo = input.ReadInt32();
            break;
          }
          case 874: {
            if (moveEvent_ == null) {
              moveEvent_ = new global::Server2N.EventMove();
            }
            input.ReadMessage(moveEvent_);
            break;
          }
          case 882: {
            if (stopEvent_ == null) {
              stopEvent_ = new global::Server2N.EventStop();
            }
            input.ReadMessage(stopEvent_);
            break;
          }
          case 890: {
            if (jumpEvent_ == null) {
              jumpEvent_ = new global::Server2N.EventJump();
            }
            input.ReadMessage(jumpEvent_);
            break;
          }
          case 898: {
            if (shootEvent_ == null) {
              shootEvent_ = new global::Server2N.EventShoot();
            }
            input.ReadMessage(shootEvent_);
            break;
          }
          case 906: {
            if (hitEvent_ == null) {
              hitEvent_ = new global::Server2N.EventHit();
            }
            input.ReadMessage(hitEvent_);
            break;
          }
          case 914: {
            if (spawnEvent_ == null) {
              spawnEvent_ = new global::Server2N.EventSpawn();
            }
            input.ReadMessage(spawnEvent_);
            break;
          }
          case 922: {
            if (syncEvent_ == null) {
              syncEvent_ = new global::Server2N.EventUserSync();
            }
            input.ReadMessage(syncEvent_);
            break;
          }
          case 930: {
            if (deathEvent_ == null) {
              deathEvent_ = new global::Server2N.EventDeath();
            }
            input.ReadMessage(deathEvent_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum action {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("EventMove")] EventMove = 100,
        [pbr::OriginalName("EventStop")] EventStop = 101,
        [pbr::OriginalName("EventJump")] EventJump = 102,
        [pbr::OriginalName("EventShoot")] EventShoot = 103,
        [pbr::OriginalName("EventHit")] EventHit = 104,
        [pbr::OriginalName("EventSpawn")] EventSpawn = 105,
        [pbr::OriginalName("EventUserSync")] EventUserSync = 106,
        [pbr::OriginalName("EventDeath")] EventDeath = 107,
        [pbr::OriginalName("EventBullet")] EventBullet = 108,
      }

    }
    #endregion

  }

  public sealed partial class PacketBody : pb::IMessage<PacketBody> {
    private static readonly pb::MessageParser<PacketBody> _parser = new pb::MessageParser<PacketBody>(() => new PacketBody());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacketBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBody(PacketBody other) : this() {
      msgType_ = other.msgType_;
      Connect = other.connect_ != null ? other.Connect.Clone() : null;
      Notice = other.notice_ != null ? other.Notice.Clone() : null;
      Event = other.event_ != null ? other.Event.Clone() : null;
      senderId_ = other.senderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBody Clone() {
      return new PacketBody(this);
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 10000;
    private global::Server2N.PacketBody.Types.messageType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.PacketBody.Types.messageType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "connect" field.</summary>
    public const int ConnectFieldNumber = 6;
    private global::Server2N.UserConnection connect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.UserConnection Connect {
      get { return connect_; }
      set {
        connect_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 10001;
    private global::Server2N.GlobalNotice notice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.GlobalNotice Notice {
      get { return notice_; }
      set {
        notice_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 7;
    private global::Server2N.GameEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.GameEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 8;
    private int senderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacketBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacketBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (!object.Equals(Connect, other.Connect)) return false;
      if (!object.Equals(Notice, other.Notice)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (SenderId != other.SenderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (connect_ != null) hash ^= Connect.GetHashCode();
      if (notice_ != null) hash ^= Notice.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (SenderId != 0) hash ^= SenderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (connect_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Connect);
      }
      if (event_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Event);
      }
      if (SenderId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SenderId);
      }
      if (MsgType != 0) {
        output.WriteRawTag(128, 241, 4);
        output.WriteEnum((int) MsgType);
      }
      if (notice_ != null) {
        output.WriteRawTag(138, 241, 4);
        output.WriteMessage(Notice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType != 0) {
        size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (connect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connect);
      }
      if (notice_ != null) {
        size += 3 + pb::CodedOutputStream.ComputeMessageSize(Notice);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (SenderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SenderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacketBody other) {
      if (other == null) {
        return;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.connect_ != null) {
        if (connect_ == null) {
          connect_ = new global::Server2N.UserConnection();
        }
        Connect.MergeFrom(other.Connect);
      }
      if (other.notice_ != null) {
        if (notice_ == null) {
          notice_ = new global::Server2N.GlobalNotice();
        }
        Notice.MergeFrom(other.Notice);
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::Server2N.GameEvent();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.SenderId != 0) {
        SenderId = other.SenderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 50: {
            if (connect_ == null) {
              connect_ = new global::Server2N.UserConnection();
            }
            input.ReadMessage(connect_);
            break;
          }
          case 58: {
            if (event_ == null) {
              event_ = new global::Server2N.GameEvent();
            }
            input.ReadMessage(event_);
            break;
          }
          case 64: {
            SenderId = input.ReadInt32();
            break;
          }
          case 80000: {
            msgType_ = (global::Server2N.PacketBody.Types.messageType) input.ReadEnum();
            break;
          }
          case 80010: {
            if (notice_ == null) {
              notice_ = new global::Server2N.GlobalNotice();
            }
            input.ReadMessage(notice_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PacketBody message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum messageType {
        [pbr::OriginalName("GameEvent")] GameEvent = 0,
        [pbr::OriginalName("UserConnection")] UserConnection = 10000,
        [pbr::OriginalName("GlobalNotice")] GlobalNotice = 10001,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
