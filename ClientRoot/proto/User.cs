// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Server2N {

  /// <summary>Holder for reflection information generated from user.proto</summary>
  public static partial class UserReflection {

    #region Descriptor
    /// <summary>File descriptor for user.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp1c2VyLnByb3RvEghzZXJ2ZXIyTiKoAQoEVXNlchIKCgJpZBgBIAEoBRpk",
            "CgZBY3Rpb24SDAoEdHlwZRgCIAEoBRIMCgRwb3NYGAMgASgFEgwKBHBvc1kY",
            "BCABKAUSDQoFc3BlZWQYBSABKAUiIQoLQUNUSU9OX1RZUEUSCAoETU9WRRAA",
            "EggKBEpVTVAQASIuCglTRU5EX1RZUEUSEQoNSU5URVJQT0xBVElPThAAEg4K",
            "CkVWRU5UX1NFTkQQASJ9Cg1DT05FQ1RfU1RBVFVTEgoKAmlkGAEgASgFEgwK",
            "BHR5cGUYAiABKAUiUgoOQ09OTkVDVF9TVEFUVVMSCAoERkFJTBAAEgsKB1JF",
            "UVVFU1QQYhIMCghSRVNQT05TRRBjEgsKB0NPTk5FQ1QQZBIOCgpESVNDT05O",
            "RUNUEGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.User), global::Server2N.User.Parser, new[]{ "Id" }, null, new[]{ typeof(global::Server2N.User.Types.SEND_TYPE) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.User.Types.Action), global::Server2N.User.Types.Action.Parser, new[]{ "Type", "PosX", "PosY", "Speed" }, null, new[]{ typeof(global::Server2N.User.Types.Action.Types.ACTION_TYPE) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.CONECT_STATUS), global::Server2N.CONECT_STATUS.Parser, new[]{ "Id", "Type" }, null, new[]{ typeof(global::Server2N.CONECT_STATUS.Types.CONNECT_STATUS) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.UserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the User message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SEND_TYPE {
        [pbr::OriginalName("INTERPOLATION")] Interpolation = 0,
        [pbr::OriginalName("EVENT_SEND")] EventSend = 1,
      }

      public sealed partial class Action : pb::IMessage<Action> {
        private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Action> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Server2N.User.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Action() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Action(Action other) : this() {
          type_ = other.type_;
          posX_ = other.posX_;
          posY_ = other.posY_;
          speed_ = other.speed_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Action Clone() {
          return new Action(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "posX" field.</summary>
        public const int PosXFieldNumber = 3;
        private int posX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PosX {
          get { return posX_; }
          set {
            posX_ = value;
          }
        }

        /// <summary>Field number for the "posY" field.</summary>
        public const int PosYFieldNumber = 4;
        private int posY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PosY {
          get { return posY_; }
          set {
            posY_ = value;
          }
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 5;
        private int speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Action);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Action other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (PosX != other.PosX) return false;
          if (PosY != other.PosY) return false;
          if (Speed != other.Speed) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (PosX != 0) hash ^= PosX.GetHashCode();
          if (PosY != 0) hash ^= PosY.GetHashCode();
          if (Speed != 0) hash ^= Speed.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Type);
          }
          if (PosX != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(PosX);
          }
          if (PosY != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(PosY);
          }
          if (Speed != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Speed);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (PosX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
          }
          if (PosY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
          }
          if (Speed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Action other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.PosX != 0) {
            PosX = other.PosX;
          }
          if (other.PosY != 0) {
            PosY = other.PosY;
          }
          if (other.Speed != 0) {
            Speed = other.Speed;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 16: {
                Type = input.ReadInt32();
                break;
              }
              case 24: {
                PosX = input.ReadInt32();
                break;
              }
              case 32: {
                PosY = input.ReadInt32();
                break;
              }
              case 40: {
                Speed = input.ReadInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Action message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum ACTION_TYPE {
            [pbr::OriginalName("MOVE")] Move = 0,
            [pbr::OriginalName("JUMP")] Jump = 1,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CONECT_STATUS : pb::IMessage<CONECT_STATUS> {
    private static readonly pb::MessageParser<CONECT_STATUS> _parser = new pb::MessageParser<CONECT_STATUS>(() => new CONECT_STATUS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CONECT_STATUS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.UserReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CONECT_STATUS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CONECT_STATUS(CONECT_STATUS other) : this() {
      id_ = other.id_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CONECT_STATUS Clone() {
      return new CONECT_STATUS(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CONECT_STATUS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CONECT_STATUS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CONECT_STATUS other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CONECT_STATUS message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CONNECT_STATUS {
        [pbr::OriginalName("FAIL")] Fail = 0,
        [pbr::OriginalName("REQUEST")] Request = 98,
        [pbr::OriginalName("RESPONSE")] Response = 99,
        [pbr::OriginalName("CONNECT")] Connect = 100,
        [pbr::OriginalName("DISCONNECT")] Disconnect = 101,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
