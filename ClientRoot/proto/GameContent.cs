// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameContent.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Server2N {

  /// <summary>Holder for reflection information generated from gameContent.proto</summary>
  public static partial class GameContentReflection {

    #region Descriptor
    /// <summary>File descriptor for gameContent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameContentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFnYW1lQ29udGVudC5wcm90bxIIc2VydmVyMk4iqQEKDlVzZXJDb25uZWN0",
            "aW9uEjgKB2NvblR5cGUYASABKA4yJy5zZXJ2ZXIyTi5Vc2VyQ29ubmVjdGlv",
            "bi5Db25uZWN0aW9uVHlwZSJdCg5Db25uZWN0aW9uVHlwZRILCgdOb3RoaW5n",
            "EAASCwoHQ29ubmVjdBABEg4KClRyeUNvbm5lY3QQAhIRCg1BY2NlcHRDb25u",
            "ZWN0EAMSDgoKRGlzQ29ubmVjdBAEIvkBCglHYW1lRXZlbnQSJwoDYWN0GAMg",
            "ASgOMhouc2VydmVyMk4uR2FtZUV2ZW50LmFjdGlvbhIWCg5hY3Rpb25Qcm9w",
            "ZXJ0eRgFIAEoBRIWCg5FdmVudFBvc2l0aW9uWBgGIAEoAhIWCg5FdmVudFBv",
            "c2l0aW9uWRgHIAEoAhIRCglWZWxvY2l0eVgYCCABKAISEQoJVmVsb2NpdHlZ",
            "GAkgASgCIlUKBmFjdGlvbhILCgdOb3RoaW5nEAASCAoETW92ZRBkEggKBFN0",
            "b3AQZRIICgRKdW1wEGYSCQoFU2hvb3QQZxIKCgZHZXRIaXQQaBIJCgVTcGF3",
            "bhBpIs4BCgpQYWNrZXRCb2R5EjIKB21zZ1R5cGUYkE4gASgOMiAuc2VydmVy",
            "Mk4uUGFja2V0Qm9keS5tZXNzYWdlVHlwZRIpCgdjb25uZWN0GAYgASgLMhgu",
            "c2VydmVyMk4uVXNlckNvbm5lY3Rpb24SIgoFZXZlbnQYByABKAsyEy5zZXJ2",
            "ZXIyTi5HYW1lRXZlbnQSCgoCaWQYCCABKAUiMQoLbWVzc2FnZVR5cGUSDQoJ",
            "R2FtZUV2ZW50EAASEwoOVXNlckNvbm5lY3Rpb24QkE5iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.UserConnection), global::Server2N.UserConnection.Parser, new[]{ "ConType" }, null, new[]{ typeof(global::Server2N.UserConnection.Types.ConnectionType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.GameEvent), global::Server2N.GameEvent.Parser, new[]{ "Act", "ActionProperty", "EventPositionX", "EventPositionY", "VelocityX", "VelocityY" }, null, new[]{ typeof(global::Server2N.GameEvent.Types.action) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Server2N.PacketBody), global::Server2N.PacketBody.Parser, new[]{ "MsgType", "Connect", "Event", "Id" }, null, new[]{ typeof(global::Server2N.PacketBody.Types.messageType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UserConnection : pb::IMessage<UserConnection> {
    private static readonly pb::MessageParser<UserConnection> _parser = new pb::MessageParser<UserConnection>(() => new UserConnection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserConnection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnection(UserConnection other) : this() {
      conType_ = other.conType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnection Clone() {
      return new UserConnection(this);
    }

    /// <summary>Field number for the "conType" field.</summary>
    public const int ConTypeFieldNumber = 1;
    private global::Server2N.UserConnection.Types.ConnectionType conType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.UserConnection.Types.ConnectionType ConType {
      get { return conType_; }
      set {
        conType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserConnection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserConnection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConType != other.ConType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConType != 0) hash ^= ConType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ConType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserConnection other) {
      if (other == null) {
        return;
      }
      if (other.ConType != 0) {
        ConType = other.ConType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            conType_ = (global::Server2N.UserConnection.Types.ConnectionType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserConnection message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ConnectionType {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("Connect")] Connect = 1,
        [pbr::OriginalName("TryConnect")] TryConnect = 2,
        [pbr::OriginalName("AcceptConnect")] AcceptConnect = 3,
        [pbr::OriginalName("DisConnect")] DisConnect = 4,
      }

    }
    #endregion

  }

  public sealed partial class GameEvent : pb::IMessage<GameEvent> {
    private static readonly pb::MessageParser<GameEvent> _parser = new pb::MessageParser<GameEvent>(() => new GameEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent(GameEvent other) : this() {
      act_ = other.act_;
      actionProperty_ = other.actionProperty_;
      eventPositionX_ = other.eventPositionX_;
      eventPositionY_ = other.eventPositionY_;
      velocityX_ = other.velocityX_;
      velocityY_ = other.velocityY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent Clone() {
      return new GameEvent(this);
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 3;
    private global::Server2N.GameEvent.Types.action act_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.GameEvent.Types.action Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "actionProperty" field.</summary>
    public const int ActionPropertyFieldNumber = 5;
    private int actionProperty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionProperty {
      get { return actionProperty_; }
      set {
        actionProperty_ = value;
      }
    }

    /// <summary>Field number for the "EventPositionX" field.</summary>
    public const int EventPositionXFieldNumber = 6;
    private float eventPositionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EventPositionX {
      get { return eventPositionX_; }
      set {
        eventPositionX_ = value;
      }
    }

    /// <summary>Field number for the "EventPositionY" field.</summary>
    public const int EventPositionYFieldNumber = 7;
    private float eventPositionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EventPositionY {
      get { return eventPositionY_; }
      set {
        eventPositionY_ = value;
      }
    }

    /// <summary>Field number for the "VelocityX" field.</summary>
    public const int VelocityXFieldNumber = 8;
    private float velocityX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    /// <summary>Field number for the "VelocityY" field.</summary>
    public const int VelocityYFieldNumber = 9;
    private float velocityY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Act != other.Act) return false;
      if (ActionProperty != other.ActionProperty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EventPositionX, other.EventPositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EventPositionY, other.EventPositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelocityX, other.VelocityX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelocityY, other.VelocityY)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Act != 0) hash ^= Act.GetHashCode();
      if (ActionProperty != 0) hash ^= ActionProperty.GetHashCode();
      if (EventPositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EventPositionX);
      if (EventPositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EventPositionY);
      if (VelocityX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelocityX);
      if (VelocityY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelocityY);
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Act != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Act);
      }
      if (ActionProperty != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActionProperty);
      }
      if (EventPositionX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(EventPositionX);
      }
      if (EventPositionY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(EventPositionY);
      }
      if (VelocityX != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(VelocityX);
      }
      if (VelocityY != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(VelocityY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Act);
      }
      if (ActionProperty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionProperty);
      }
      if (EventPositionX != 0F) {
        size += 1 + 4;
      }
      if (EventPositionY != 0F) {
        size += 1 + 4;
      }
      if (VelocityX != 0F) {
        size += 1 + 4;
      }
      if (VelocityY != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEvent other) {
      if (other == null) {
        return;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.ActionProperty != 0) {
        ActionProperty = other.ActionProperty;
      }
      if (other.EventPositionX != 0F) {
        EventPositionX = other.EventPositionX;
      }
      if (other.EventPositionY != 0F) {
        EventPositionY = other.EventPositionY;
      }
      if (other.VelocityX != 0F) {
        VelocityX = other.VelocityX;
      }
      if (other.VelocityY != 0F) {
        VelocityY = other.VelocityY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            act_ = (global::Server2N.GameEvent.Types.action) input.ReadEnum();
            break;
          }
          case 40: {
            ActionProperty = input.ReadInt32();
            break;
          }
          case 53: {
            EventPositionX = input.ReadFloat();
            break;
          }
          case 61: {
            EventPositionY = input.ReadFloat();
            break;
          }
          case 69: {
            VelocityX = input.ReadFloat();
            break;
          }
          case 77: {
            VelocityY = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum action {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("Move")] Move = 100,
        [pbr::OriginalName("Stop")] Stop = 101,
        [pbr::OriginalName("Jump")] Jump = 102,
        [pbr::OriginalName("Shoot")] Shoot = 103,
        [pbr::OriginalName("GetHit")] GetHit = 104,
        [pbr::OriginalName("Spawn")] Spawn = 105,
      }

    }
    #endregion

  }

  public sealed partial class PacketBody : pb::IMessage<PacketBody> {
    private static readonly pb::MessageParser<PacketBody> _parser = new pb::MessageParser<PacketBody>(() => new PacketBody());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacketBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Server2N.GameContentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBody(PacketBody other) : this() {
      msgType_ = other.msgType_;
      Connect = other.connect_ != null ? other.Connect.Clone() : null;
      Event = other.event_ != null ? other.Event.Clone() : null;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBody Clone() {
      return new PacketBody(this);
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 10000;
    private global::Server2N.PacketBody.Types.messageType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.PacketBody.Types.messageType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "connect" field.</summary>
    public const int ConnectFieldNumber = 6;
    private global::Server2N.UserConnection connect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.UserConnection Connect {
      get { return connect_; }
      set {
        connect_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 7;
    private global::Server2N.GameEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Server2N.GameEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 8;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacketBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacketBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (!object.Equals(Connect, other.Connect)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (connect_ != null) hash ^= Connect.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (connect_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Connect);
      }
      if (event_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Event);
      }
      if (Id != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Id);
      }
      if (MsgType != 0) {
        output.WriteRawTag(128, 241, 4);
        output.WriteEnum((int) MsgType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType != 0) {
        size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (connect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connect);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacketBody other) {
      if (other == null) {
        return;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.connect_ != null) {
        if (connect_ == null) {
          connect_ = new global::Server2N.UserConnection();
        }
        Connect.MergeFrom(other.Connect);
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::Server2N.GameEvent();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 50: {
            if (connect_ == null) {
              connect_ = new global::Server2N.UserConnection();
            }
            input.ReadMessage(connect_);
            break;
          }
          case 58: {
            if (event_ == null) {
              event_ = new global::Server2N.GameEvent();
            }
            input.ReadMessage(event_);
            break;
          }
          case 64: {
            Id = input.ReadInt32();
            break;
          }
          case 80000: {
            msgType_ = (global::Server2N.PacketBody.Types.messageType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PacketBody message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum messageType {
        [pbr::OriginalName("GameEvent")] GameEvent = 0,
        [pbr::OriginalName("UserConnection")] UserConnection = 10000,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
